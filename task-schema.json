{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://github.com/Microsoft/vsts-agent/blob/master/src/Misc/task-schema.json",
  "$comment": "generated 07/24/2018",
  "title": "Pipeline task schema",
  "description": "A task definition",
  "type": "object",
  "required": [
    "task"
  ],
  "anyOf": [
    {
      "properties": {
        "task": {
          "pattern": "^[aA][nN][dD][rR][oO][iI][dD][sS][iI][gG][nN][iI][nN][gG]@2$",
          "description": "Android Signing\n\nSign and align Android APK files"
        },
        "inputs": {
          "properties": {
            "files": {
              "description": "APK files",
              "type": "string"
            },
            "jarsign": {
              "description": "Sign the APK",
              "type": "boolean"
            },
            "keystoreFile": {
              "description": "Keystore file"
            },
            "keystorePass": {
              "description": "Keystore password",
              "type": "string"
            },
            "keystoreAlias": {
              "description": "Alias",
              "type": "string"
            },
            "keyPass": {
              "description": "Key password",
              "type": "string"
            },
            "jarsignerArguments": {
              "description": "Jarsigner arguments",
              "type": "string"
            },
            "zipalign": {
              "description": "Zipalign",
              "type": "boolean"
            },
            "zipalignLocation": {
              "description": "Zipalign location",
              "type": "string"
            }
          },
          "description": "Android Signing inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[aA][nN][dD][rR][oO][iI][dD][sS][iI][gG][nN][iI][nN][gG]@3$",
          "description": "Android Signing\n\nSign and align Android APK files"
        },
        "inputs": {
          "properties": {
            "files": {
              "description": "APK files",
              "type": "string"
            },
            "apksign": {
              "description": "Sign the APK",
              "type": "boolean"
            },
            "keystoreFile": {
              "description": "Keystore file"
            },
            "keystorePass": {
              "description": "Keystore password",
              "type": "string"
            },
            "keystoreAlias": {
              "description": "Alias",
              "type": "string"
            },
            "keyPass": {
              "description": "Key password",
              "type": "string"
            },
            "apksignerArguments": {
              "description": "apksigner arguments",
              "type": "string"
            },
            "apksignerLocation": {
              "description": "apksigner location",
              "type": "string"
            },
            "zipalign": {
              "description": "Zipalign",
              "type": "boolean"
            },
            "zipalignLocation": {
              "description": "Zipalign location",
              "type": "string"
            }
          },
          "description": "Android Signing inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[aA][nN][tT]@1$",
          "description": "Ant\n\nBuild with Apache Ant"
        },
        "inputs": {
          "properties": {
            "antBuildFile": {
              "description": "Ant build file",
              "type": "string"
            },
            "options": {
              "description": "Options",
              "type": "string"
            },
            "targets": {
              "description": "Target(s)",
              "type": "string"
            },
            "publishJUnitResults": {
              "description": "Publish to TFS/Team Services",
              "type": "boolean"
            },
            "testResultsFiles": {
              "description": "Test results files",
              "type": "string"
            },
            "testRunTitle": {
              "description": "Test run title",
              "type": "string"
            },
            "codeCoverageTool": {
              "description": "Code coverage tool",
              "enum": [
                "None",
                "Cobertura",
                "JaCoCo"
              ]
            },
            "classFilesDirectories": {
              "description": "Class files directories",
              "type": "string"
            },
            "classFilter": {
              "description": "Class inclusion/exclusion filters",
              "type": "string"
            },
            "srcDirectories": {
              "description": "Source files directories",
              "type": "string"
            },
            "failIfCoverageEmpty": {
              "description": "Fail when code coverage results are missing",
              "type": "boolean"
            },
            "antHomeUserInputPath": {
              "description": "Set ANT_HOME path",
              "type": "string"
            },
            "javaHomeSelection": {
              "description": "Set JAVA_HOME by",
              "enum": [
                "JDKVersion",
                "Path"
              ]
            },
            "jdkVersion": {
              "description": "JDK version",
              "enum": [
                "default",
                "1.10",
                "1.9",
                "1.8",
                "1.7",
                "1.6"
              ]
            },
            "jdkUserInputPath": {
              "description": "JDK path",
              "type": "string"
            },
            "jdkArchitecture": {
              "description": "JDK architecture",
              "enum": [
                "x86",
                "x64"
              ]
            }
          },
          "description": "Ant inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[aA][pP][pP][cC][eE][nN][tT][eE][rR][dD][iI][sS][tT][rR][iI][bB][uU][tT][eE]@1$",
          "description": "App Center Distribute\n\nDistribute app builds to testers and users via App Center"
        },
        "inputs": {
          "properties": {
            "serverEndpoint": {
              "description": "App Center service connection",
              "type": "string"
            },
            "appSlug": {
              "description": "App slug",
              "type": "string"
            },
            "app": {
              "description": "Binary file path",
              "type": "string"
            },
            "symbolsType": {
              "description": "Symbols type",
              "enum": [
                "Apple"
              ]
            },
            "symbolsPath": {
              "description": "Symbols path",
              "type": "string"
            },
            "pdbPath": {
              "description": "Symbols path (*.pdb)",
              "type": "string"
            },
            "dsymPath": {
              "description": "dSYM path",
              "type": "string"
            },
            "mappingTxtPath": {
              "description": "Mapping file",
              "type": "string"
            },
            "packParentFolder": {
              "description": "Include all items in parent folder",
              "type": "boolean"
            },
            "releaseNotesSelection": {
              "description": "Create release notes",
              "enum": [
                "input",
                "file"
              ]
            },
            "releaseNotesInput": {
              "description": "Release notes",
              "type": "string"
            },
            "releaseNotesFile": {
              "description": "Release notes file",
              "type": "string"
            },
            "destinationId": {
              "description": "Destination ID",
              "type": "string"
            }
          },
          "description": "App Center Distribute inputs",
          "required": [
            "serverEndpoint",
            "appSlug",
            "app"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[aA][pP][pP][cC][eE][nN][tT][eE][rR][tT][eE][sS][tT]@1$",
          "description": "App Center Test\n\nTest app packages with Visual Studio App Center."
        },
        "inputs": {
          "properties": {
            "app": {
              "description": "Binary application file path",
              "type": "string"
            },
            "artifactsDir": {
              "description": "Artifacts directory",
              "type": "string"
            },
            "enablePrepare": {
              "description": "Prepare tests",
              "type": "boolean"
            },
            "framework": {
              "description": "Test framework",
              "enum": [
                "appium",
                "espresso",
                "calabash",
                "uitest",
                "xcuitest"
              ]
            },
            "appiumBuildDir": {
              "description": "Build directory",
              "type": "string"
            },
            "espressoBuildDir": {
              "description": "Build directory",
              "type": "string"
            },
            "espressoTestApkPath": {
              "description": "Test APK path",
              "type": "string"
            },
            "calabashProjectDir": {
              "description": "Project directory",
              "type": "string"
            },
            "calabashConfigFile": {
              "description": "Cucumber config file",
              "type": "string"
            },
            "calabashProfile": {
              "description": "Profile to run",
              "type": "string"
            },
            "calabashSkipConfigCheck": {
              "description": "Skip Configuration Check",
              "type": "boolean"
            },
            "uitestBuildDir": {
              "description": "Build directory",
              "type": "string"
            },
            "uitestStoreFile": {
              "description": "Store file",
              "type": "string"
            },
            "uitestStorePass": {
              "description": "Store password",
              "type": "string"
            },
            "uitestKeyAlias": {
              "description": "Key alias",
              "type": "string"
            },
            "uitestKeyPass": {
              "description": "Key password",
              "type": "string"
            },
            "uitestToolsDir": {
              "description": "Test tools directory",
              "type": "string"
            },
            "signInfo": {
              "description": "Signing information",
              "type": "string"
            },
            "xcuitestBuildDir": {
              "description": "Build directory",
              "type": "string"
            },
            "xcuitestTestIpaPath": {
              "description": "Test IPA path",
              "type": "string"
            },
            "prepareOpts": {
              "description": "Additional options",
              "type": "string"
            },
            "enableRun": {
              "description": "Run tests",
              "type": "boolean"
            },
            "credsType": {
              "description": "Authentication method",
              "enum": [
                "serviceEndpoint",
                "inputs"
              ]
            },
            "serverEndpoint": {
              "description": "App Center service connection",
              "type": "string"
            },
            "username": {
              "description": "App Center username",
              "type": "string"
            },
            "password": {
              "description": "App Center password",
              "type": "string"
            },
            "appSlug": {
              "description": "App slug",
              "type": "string"
            },
            "devices": {
              "description": "Devices",
              "type": "string"
            },
            "series": {
              "description": "Test series",
              "type": "string"
            },
            "dsymDir": {
              "description": "dSYM directory",
              "type": "string"
            },
            "locale": {
              "description": "System language",
              "enum": [
                "da_DK",
                "nl_NL",
                "en_GB",
                "en_US",
                "fr_FR",
                "de_DE",
                "ja_JP",
                "ru_RU",
                "es_MX",
                "es_ES",
                "user"
              ]
            },
            "userDefinedLocale": {
              "description": "Other locale",
              "type": "string"
            },
            "loginOpts": {
              "description": "Additional options for login",
              "type": "string"
            },
            "runOpts": {
              "description": "Additional options for run",
              "type": "string"
            },
            "async": {
              "description": "Do not wait for test result",
              "type": "boolean"
            },
            "cliLocationOverride": {
              "description": "App Center CLI location",
              "type": "string"
            },
            "debug": {
              "description": "Enable debug output",
              "type": "boolean"
            }
          },
          "description": "App Center Test inputs",
          "required": [
            "app"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[aA][rR][cC][hH][iI][vV][eE][fF][iI][lL][eE][sS]@2$",
          "description": "Archive Files\n\nArchive files using compression formats such as .7z, .rar, .tar.gz, and .zip."
        },
        "inputs": {
          "properties": {
            "rootFolderOrFile": {
              "description": "Root folder or file to archive",
              "type": "string"
            },
            "includeRootFolder": {
              "description": "Prepend root folder name to archive paths",
              "type": "boolean"
            },
            "archiveType": {
              "description": "Archive type",
              "enum": [
                "zip",
                "7z",
                "tar",
                "wim"
              ]
            },
            "tarCompression": {
              "description": "Tar compression",
              "enum": [
                "gz",
                "bz2",
                "xz",
                "none"
              ]
            },
            "archiveFile": {
              "description": "Archive file to create",
              "type": "string"
            },
            "replaceExistingArchive": {
              "description": "Replace existing archive",
              "type": "boolean"
            }
          },
          "description": "Archive Files inputs",
          "required": [
            "includeRootFolder"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[aA][zZ][uU][rR][eE][aA][pP][pP][sS][eE][rR][vV][iI][cC][eE][mM][aA][nN][aA][gG][eE]@0$",
          "description": "Azure App Service Manage\n\nStart, Stop, Restart, Slot swap, Install site extensions or Enable Continuous Monitoring for an Azure App Service"
        },
        "inputs": {
          "properties": {
            "ConnectedServiceName": {
              "description": "Azure subscription",
              "type": "string"
            },
            "Action": {
              "description": "Action",
              "enum": [
                "Swap Slots",
                "Start Azure App Service",
                "Stop Azure App Service",
                "Restart Azure App Service",
                "Install Extensions",
                "Enable Continuous Monitoring",
                "Start all continuous webjobs",
                "Stop all continuous webjobs"
              ]
            },
            "WebAppName": {
              "description": "App Service name",
              "type": "string"
            },
            "SpecifySlot": {
              "description": "Specify Slot or App Service Environment",
              "type": "boolean"
            },
            "ResourceGroupName": {
              "description": "Resource group",
              "type": "string"
            },
            "SourceSlot": {
              "description": "Source Slot",
              "type": "string"
            },
            "SwapWithProduction": {
              "description": "Swap with Production",
              "type": "boolean"
            },
            "TargetSlot": {
              "description": "Target Slot",
              "type": "string"
            },
            "PreserveVnet": {
              "description": "Preserve Vnet",
              "type": "boolean"
            },
            "Slot": {
              "description": "Slot",
              "type": "string"
            },
            "ExtensionsList": {
              "description": "Install Extensions",
              "type": "string"
            },
            "OutputVariable": {
              "description": "Output variable",
              "type": "string"
            },
            "AppInsightsResourceGroupName": {
              "description": "Resource Group name for Application Insights",
              "type": "string"
            },
            "ApplicationInsightsResourceName": {
              "description": "Application Insights resource name",
              "type": "string"
            },
            "ApplicationInsightsWebTestName": {
              "description": "Application Insights web test name",
              "type": "string"
            }
          },
          "description": "Azure App Service Manage inputs",
          "required": [
            "ConnectedServiceName",
            "WebAppName"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[aA][zZ][uU][rR][eE][cC][lL][iI]@1$",
          "description": "Azure CLI\n\nRun a Shell or Batch script with Azure CLI commands against an azure subscription"
        },
        "inputs": {
          "properties": {
            "connectedServiceNameARM": {
              "description": "Azure subscription",
              "type": "string"
            },
            "scriptLocation": {
              "description": "Script Location",
              "enum": [
                "inlineScript",
                "scriptPath"
              ]
            },
            "scriptPath": {
              "description": "Script Path",
              "type": "string"
            },
            "inlineScript": {
              "description": "Inline Script",
              "type": "string"
            },
            "args": {
              "description": "Arguments",
              "type": "string"
            },
            "cwd": {
              "description": "Working Directory",
              "type": "string"
            },
            "failOnStandardError": {
              "description": "Fail on Standard Error",
              "type": "boolean"
            }
          },
          "description": "Azure CLI inputs",
          "required": [
            "connectedServiceNameARM"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[aA][zZ][uU][rR][eE][cC][lL][oO][uU][dD][pP][oO][wW][eE][rR][sS][hH][eE][lL][lL][dD][eE][pP][lL][oO][yY][mM][eE][nN][tT]@1$",
          "description": "Azure Cloud Service Deployment\n\nDeploy an Azure Cloud Service"
        },
        "inputs": {
          "properties": {
            "ConnectedServiceName": {
              "description": "Azure subscription (Classic)",
              "type": "string"
            },
            "StorageAccount": {
              "description": "Storage account",
              "type": "string"
            },
            "ServiceName": {
              "description": "Service name",
              "type": "string"
            },
            "ServiceLocation": {
              "description": "Service location",
              "type": "string"
            },
            "CsPkg": {
              "description": "CsPkg",
              "type": "string"
            },
            "CsCfg": {
              "description": "CsCfg",
              "type": "string"
            },
            "Slot": {
              "description": "Environment (Slot)",
              "type": "string"
            },
            "DeploymentLabel": {
              "description": "Deployment label",
              "type": "string"
            },
            "AppendDateTimeToLabel": {
              "description": "Append current date and time",
              "type": "boolean"
            },
            "AllowUpgrade": {
              "description": "Allow upgrade",
              "type": "boolean"
            },
            "SimultaneousUpgrade": {
              "description": "Simultaneous upgrade",
              "type": "boolean"
            },
            "ForceUpgrade": {
              "description": "Force upgrade",
              "type": "boolean"
            },
            "DiagnosticStorageAccountKeys": {
              "description": "Diagnostic storage account keys",
              "type": "string"
            },
            "NewServiceCustomCertificates": {
              "description": "Custom certificates to import",
              "type": "string"
            },
            "NewServiceAdditionalArguments": {
              "description": "Additional arguments",
              "type": "string"
            },
            "NewServiceAffinityGroup": {
              "description": "Affinity group",
              "type": "string"
            }
          },
          "description": "Azure Cloud Service Deployment inputs",
          "required": [
            "ConnectedServiceName",
            "StorageAccount",
            "ServiceName",
            "ServiceLocation",
            "CsPkg",
            "CsCfg"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[aA][zZ][uU][rR][eE][fF][iI][lL][eE][cC][oO][pP][yY]@1$",
          "description": "Azure File Copy\n\nCopy files to Azure blob or VM(s)"
        },
        "inputs": {
          "properties": {
            "SourcePath": {
              "description": "Source",
              "type": "string"
            },
            "ConnectedServiceNameSelector": {
              "description": "Azure Connection Type",
              "enum": [
                "ConnectedServiceName",
                "ConnectedServiceNameARM"
              ]
            },
            "ConnectedServiceName": {
              "description": "Azure Classic Subscription",
              "type": "string"
            },
            "ConnectedServiceNameARM": {
              "description": "Azure Subscription",
              "type": "string"
            },
            "Destination": {
              "description": "Destination Type",
              "enum": [
                "AzureBlob",
                "AzureVMs"
              ]
            },
            "StorageAccount": {
              "description": "Classic Storage Account",
              "type": "string"
            },
            "StorageAccountRM": {
              "description": "RM Storage Account",
              "type": "string"
            },
            "ContainerName": {
              "description": "Container Name",
              "type": "string"
            },
            "BlobPrefix": {
              "description": "Blob Prefix",
              "type": "string"
            },
            "EnvironmentName": {
              "description": "Cloud Service",
              "type": "string"
            },
            "EnvironmentNameRM": {
              "description": "Resource Group",
              "type": "string"
            },
            "ResourceFilteringMethod": {
              "description": "Select Machines By",
              "enum": [
                "machineNames",
                "tags"
              ]
            },
            "MachineNames": {
              "description": "Filter Criteria",
              "type": "string"
            },
            "vmsAdminUserName": {
              "description": "Admin Login",
              "type": "string"
            },
            "vmsAdminPassword": {
              "description": "Password",
              "type": "string"
            },
            "TargetPath": {
              "description": "Destination Folder",
              "type": "string"
            },
            "AdditionalArguments": {
              "description": "Additional Arguments",
              "type": "string"
            },
            "enableCopyPrerequisites": {
              "description": "Enable Copy Prerequisites",
              "type": "boolean"
            },
            "CopyFilesInParallel": {
              "description": "Copy in Parallel",
              "type": "boolean"
            },
            "CleanTargetBeforeCopy": {
              "description": "Clean Target",
              "type": "boolean"
            },
            "skipCACheck": {
              "description": "Test Certificate",
              "type": "boolean"
            },
            "outputStorageUri": {
              "description": "Storage Container URI",
              "type": "string"
            },
            "outputStorageContainerSasToken": {
              "description": "Storage Container SAS Token",
              "type": "string"
            }
          },
          "description": "Azure File Copy inputs",
          "required": [
            "SourcePath",
            "Destination"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[aA][zZ][uU][rR][eE][fF][iI][lL][eE][cC][oO][pP][yY]@2$",
          "description": "Azure File Copy\n\nCopy files to Azure blob or VM(s)"
        },
        "inputs": {
          "properties": {
            "SourcePath": {
              "description": "Source",
              "type": "string"
            },
            "ConnectedServiceNameSelector": {
              "description": "Azure Connection Type",
              "enum": [
                "ConnectedServiceName",
                "ConnectedServiceNameARM"
              ]
            },
            "ConnectedServiceName": {
              "description": "Azure Classic Subscription",
              "type": "string"
            },
            "ConnectedServiceNameARM": {
              "description": "Azure Subscription",
              "type": "string"
            },
            "Destination": {
              "description": "Destination Type",
              "enum": [
                "AzureBlob",
                "AzureVMs"
              ]
            },
            "StorageAccount": {
              "description": "Classic Storage Account",
              "type": "string"
            },
            "StorageAccountRM": {
              "description": "RM Storage Account",
              "type": "string"
            },
            "ContainerName": {
              "description": "Container Name",
              "type": "string"
            },
            "BlobPrefix": {
              "description": "Blob Prefix",
              "type": "string"
            },
            "EnvironmentName": {
              "description": "Cloud Service",
              "type": "string"
            },
            "EnvironmentNameRM": {
              "description": "Resource Group",
              "type": "string"
            },
            "ResourceFilteringMethod": {
              "description": "Select Machines By",
              "enum": [
                "machineNames",
                "tags"
              ]
            },
            "MachineNames": {
              "description": "Filter Criteria",
              "type": "string"
            },
            "vmsAdminUserName": {
              "description": "Admin Login",
              "type": "string"
            },
            "vmsAdminPassword": {
              "description": "Password",
              "type": "string"
            },
            "TargetPath": {
              "description": "Destination Folder",
              "type": "string"
            },
            "AdditionalArgumentsForBlobCopy": {
              "description": "Optional Arguments (for uploading files to blob)",
              "type": "string"
            },
            "AdditionalArgumentsForVMCopy": {
              "description": "Optional Arguments (for downloading files to VM)",
              "type": "string"
            },
            "enableCopyPrerequisites": {
              "description": "Enable Copy Prerequisites",
              "type": "boolean"
            },
            "CopyFilesInParallel": {
              "description": "Copy in Parallel",
              "type": "boolean"
            },
            "CleanTargetBeforeCopy": {
              "description": "Clean Target",
              "type": "boolean"
            },
            "skipCACheck": {
              "description": "Test Certificate",
              "type": "boolean"
            },
            "outputStorageUri": {
              "description": "Storage Container URI",
              "type": "string"
            },
            "outputStorageContainerSasToken": {
              "description": "Storage Container SAS Token",
              "type": "string"
            }
          },
          "description": "Azure File Copy inputs",
          "required": [
            "SourcePath",
            "Destination"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[aA][zZ][uU][rR][eE][fF][uU][nN][cC][tT][iI][oO][nN]@1$",
          "description": "Invoke Azure Function\n\nInvoke Azure function as a part of your process."
        },
        "inputs": {
          "properties": {
            "function": {
              "description": "Azure function URL",
              "type": "string"
            },
            "key": {
              "description": "Function key",
              "type": "string"
            },
            "method": {
              "description": "Method",
              "enum": [
                "OPTIONS",
                "GET",
                "HEAD",
                "POST",
                "PUT",
                "DELETE",
                "TRACE",
                "PATCH"
              ]
            },
            "headers": {
              "description": "Headers",
              "type": "string"
            },
            "queryParameters": {
              "description": "Query parameters",
              "type": "string"
            },
            "body": {
              "description": "Body",
              "type": "string"
            },
            "waitForCompletion": {
              "description": "Completion event",
              "enum": [
                "true",
                "false"
              ]
            },
            "successCriteria": {
              "description": "Success criteria",
              "type": "string"
            }
          },
          "description": "Invoke Azure Function inputs",
          "required": [
            "function",
            "key"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[aA][zZ][uU][rR][eE][kK][eE][yY][vV][aA][uU][lL][tT]@1$",
          "description": "Azure Key Vault\n\nDownload Azure Key Vault Secrets"
        },
        "inputs": {
          "properties": {
            "ConnectedServiceName": {
              "description": "Azure subscription",
              "type": "string"
            },
            "KeyVaultName": {
              "description": "Key vault",
              "type": "string"
            },
            "SecretsFilter": {
              "description": "Secrets filter",
              "type": "string"
            }
          },
          "description": "Azure Key Vault inputs",
          "required": [
            "ConnectedServiceName",
            "KeyVaultName"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[aA][zZ][uU][rR][eE][mM][oO][nN][iI][tT][oO][rR][aA][lL][eE][rR][tT][sS]@0$",
          "description": "Azure Monitor Alerts\n\nConfigure alerts on available metrics for an Azure resource"
        },
        "inputs": {
          "properties": {
            "ConnectedServiceName": {
              "description": "Azure Subscription",
              "type": "string"
            },
            "ResourceGroupName": {
              "description": "Resource Group",
              "type": "string"
            },
            "ResourceType": {
              "description": "Resource Type",
              "enum": [
                "Microsoft.Insights/components",
                "Microsoft.Web/sites",
                "Microsoft.Storage/storageAccounts",
                "Microsoft.Compute/virtualMachines"
              ]
            },
            "ResourceName": {
              "description": "Resource name",
              "type": "string"
            },
            "AlertRules": {
              "description": "Alert rules",
              "type": "string"
            },
            "NotifyServiceOwners": {
              "description": "Subscription owners, contributors and readers",
              "type": "boolean"
            },
            "NotifyEmails": {
              "description": "Additional administrator emails",
              "type": "string"
            }
          },
          "description": "Azure Monitor Alerts inputs",
          "required": [
            "ConnectedServiceName",
            "ResourceGroupName",
            "ResourceName",
            "AlertRules"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[aA][zZ][uU][rR][eE][mM][oO][nN][iI][tT][oO][rR]@0$",
          "description": "Query Azure Monitor Alerts\n\nObserve the configured Azure monitor rules for active alerts."
        },
        "inputs": {
          "properties": {
            "connectedServiceNameARM": {
              "description": "Azure subscription",
              "type": "string"
            },
            "ResourceGroupName": {
              "description": "Resource group",
              "type": "string"
            },
            "ResourceType": {
              "description": "Resource type",
              "enum": [
                "Microsoft.Insights/components",
                "Microsoft.Web/sites",
                "Microsoft.Storage/storageAccounts",
                "Microsoft.Compute/virtualMachines"
              ]
            },
            "resourceName": {
              "description": "Resource name",
              "type": "string"
            },
            "alertRules": {
              "description": "Alert rules",
              "type": "string"
            }
          },
          "description": "Query Azure Monitor Alerts inputs",
          "required": [
            "connectedServiceNameARM",
            "ResourceGroupName",
            "resourceName",
            "alertRules"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[aA][zZ][uU][rR][eE][mM][yY][sS][qQ][lL][dD][eE][pP][lL][oO][yY][mM][eE][nN][tT]@1$",
          "description": "Azure Database for MySQL Deployment\n\nThis is an early preview. Run your scripts and make changes to your Azure Database for MySQL."
        },
        "inputs": {
          "properties": {
            "ConnectedServiceName": {
              "description": "Azure Subscription",
              "type": "string"
            },
            "ServerName": {
              "description": "Host Name",
              "type": "string"
            },
            "DatabaseName": {
              "description": "Database Name",
              "type": "string"
            },
            "SqlUsername": {
              "description": "Server Admin Login",
              "type": "string"
            },
            "SqlPassword": {
              "description": "Password",
              "type": "string"
            },
            "TaskNameSelector": {
              "description": "Type",
              "enum": [
                "SqlTaskFile",
                "InlineSqlTask"
              ]
            },
            "SqlFile": {
              "description": "MySQL Script",
              "type": "string"
            },
            "SqlInline": {
              "description": "Inline MySQL Script",
              "type": "string"
            },
            "SqlAdditionalArguments": {
              "description": "Additional MySQL Arguments",
              "type": "string"
            },
            "IpDetectionMethod": {
              "description": "Specify Firewall Rules Using",
              "enum": [
                "AutoDetect",
                "IPAddressRange"
              ]
            },
            "StartIpAddress": {
              "description": "Start IP Address",
              "type": "string"
            },
            "EndIpAddress": {
              "description": "End IP Address",
              "type": "string"
            },
            "DeleteFirewallRule": {
              "description": "Delete Rule After Task Ends",
              "type": "boolean"
            }
          },
          "description": "Azure Database for MySQL Deployment inputs",
          "required": [
            "ConnectedServiceName",
            "ServerName",
            "SqlUsername",
            "SqlPassword"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[aA][zZ][uU][rR][eE][nN][lL][bB][mM][aA][nN][aA][gG][eE][mM][eE][nN][tT]@1$",
          "description": "Azure Network Load Balancer\n\nConnect/Disconnect an Azure virtual machine's network interface to a Load Balancer's backend address pool"
        },
        "inputs": {
          "properties": {
            "ConnectedServiceName": {
              "description": "Azure Subscription",
              "type": "string"
            },
            "ResourceGroupName": {
              "description": "Resource Group",
              "type": "string"
            },
            "LoadBalancer": {
              "description": "Load Balancer Name",
              "type": "string"
            },
            "Action": {
              "description": "Action",
              "enum": [
                "Disconnect",
                "Connect"
              ]
            }
          },
          "description": "Azure Network Load Balancer inputs",
          "required": [
            "ConnectedServiceName",
            "ResourceGroupName",
            "LoadBalancer",
            "Action"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[aA][zZ][uU][rR][eE][pP][oO][wW][eE][rR][sS][hH][eE][lL][lL]@3$",
          "description": "Azure PowerShell\n\nRun a PowerShell script within an Azure environment"
        },
        "inputs": {
          "properties": {
            "ConnectedServiceNameSelector": {
              "description": "Azure Connection Type",
              "enum": [
                "ConnectedServiceName",
                "ConnectedServiceNameARM"
              ]
            },
            "ConnectedServiceName": {
              "description": "Azure Classic Subscription",
              "type": "string"
            },
            "ConnectedServiceNameARM": {
              "description": "Azure Subscription",
              "type": "string"
            },
            "ScriptType": {
              "description": "Script Type",
              "enum": [
                "FilePath",
                "InlineScript"
              ]
            },
            "ScriptPath": {
              "description": "Script Path",
              "type": "string"
            },
            "Inline": {
              "description": "Inline Script",
              "type": "string"
            },
            "ScriptArguments": {
              "description": "Script Arguments",
              "type": "string"
            },
            "errorActionPreference": {
              "description": "ErrorActionPreference",
              "enum": [
                "stop",
                "continue",
                "silentlyContinue"
              ]
            },
            "FailOnStandardError": {
              "description": "Fail on Standard Error",
              "type": "boolean"
            },
            "TargetAzurePs": {
              "description": "Azure PowerShell Version",
              "enum": [
                "LatestVersion",
                "OtherVersion"
              ]
            },
            "CustomTargetAzurePs": {
              "description": "Preferred Azure PowerShell Version",
              "type": "string"
            }
          },
          "description": "Azure PowerShell inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[aA][zZ][uU][rR][eE][rR][eE][sS][oO][uU][rR][cC][eE][gG][rR][oO][uU][pP][dD][eE][pP][lL][oO][yY][mM][eE][nN][tT]@2$",
          "description": "Azure Resource Group Deployment\n\nDeploy an Azure resource manager (ARM) template to a resource group. You can also start, stop, delete, deallocate all Virtual Machines (VM) in a resource group"
        },
        "inputs": {
          "properties": {
            "ConnectedServiceName": {
              "description": "Azure subscription",
              "type": "string"
            },
            "action": {
              "description": "Action",
              "enum": [
                "Create Or Update Resource Group",
                "Select Resource Group",
                "Start",
                "Stop",
                "StopWithDeallocate",
                "Restart",
                "Delete",
                "DeleteRG"
              ]
            },
            "resourceGroupName": {
              "description": "Resource group",
              "type": "string"
            },
            "location": {
              "description": "Location",
              "type": "string"
            },
            "templateLocation": {
              "description": "Template location",
              "enum": [
                "Linked artifact",
                "URL of the file"
              ]
            },
            "csmFileLink": {
              "description": "Template link",
              "type": "string"
            },
            "csmParametersFileLink": {
              "description": "Template parameters link",
              "type": "string"
            },
            "csmFile": {
              "description": "Template",
              "type": "string"
            },
            "csmParametersFile": {
              "description": "Template parameters",
              "type": "string"
            },
            "overrideParameters": {
              "description": "Override template parameters",
              "type": "string"
            },
            "deploymentMode": {
              "description": "Deployment mode",
              "enum": [
                "Incremental",
                "Complete",
                "Validation"
              ]
            },
            "enableDeploymentPrerequisites": {
              "description": "Enable prerequisites",
              "enum": [
                "None",
                "ConfigureVMwithWinRM",
                "ConfigureVMWithDGAgent"
              ]
            },
            "deploymentGroupEndpoint": {
              "description": "VSTS/TFS service connection",
              "type": "string"
            },
            "project": {
              "description": "Team project",
              "type": "string"
            },
            "deploymentGroupName": {
              "description": "Deployment Group",
              "type": "string"
            },
            "copyAzureVMTags": {
              "description": "Copy Azure VM tags to agents",
              "type": "boolean"
            },
            "runAgentServiceAsUser": {
              "description": "Run agent service as a user",
              "type": "boolean"
            },
            "userName": {
              "description": "User name",
              "type": "string"
            },
            "password": {
              "description": "Password",
              "type": "string"
            },
            "outputVariable": {
              "description": "VM details for WinRM",
              "type": "string"
            },
            "deploymentOutputs": {
              "description": "Deployment outputs",
              "type": "string"
            }
          },
          "description": "Azure Resource Group Deployment inputs",
          "required": [
            "ConnectedServiceName",
            "resourceGroupName"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[aA][zZ][uU][rR][eE][rR][mM][wW][eE][bB][aA][pP][pP][dD][eE][pP][lL][oO][yY][mM][eE][nN][tT]@3$",
          "description": "Azure App Service Deploy\n\nUpdate Azure WebApp Services On Windows, Web App On Linux with built-in images or docker containers, ASP.NET, .NET Core, PHP, Python or Node based Web applications, Function Apps, Mobile Apps, Api applications, Web Jobs using Web Deploy / Kudu REST APIs"
        },
        "inputs": {
          "properties": {
            "ConnectedServiceName": {
              "description": "Azure subscription",
              "type": "string"
            },
            "WebAppKind": {
              "description": "App type",
              "enum": [
                "app",
                "applinux",
                "functionapp",
                "api",
                "mobileapp"
              ]
            },
            "WebAppName": {
              "description": "App Service name",
              "type": "string"
            },
            "DeployToSlotFlag": {
              "description": "Deploy to slot",
              "type": "boolean"
            },
            "ResourceGroupName": {
              "description": "Resource group",
              "type": "string"
            },
            "SlotName": {
              "description": "Slot",
              "type": "string"
            },
            "ImageSource": {
              "description": "Image Source",
              "enum": [
                "Registry",
                "Builtin"
              ]
            },
            "AzureContainerRegistry": {
              "description": "Registry",
              "type": "string"
            },
            "AzureContainerRegistryLoginServer": {
              "description": "Registry Login Server Name",
              "type": "string"
            },
            "AzureContainerRegistryImage": {
              "description": "Image",
              "type": "string"
            },
            "AzureContainerRegistryTag": {
              "description": "Tag",
              "type": "string"
            },
            "DockerRepositoryAccess": {
              "description": "Repository Access",
              "enum": [
                "private",
                "public"
              ]
            },
            "RegistryConnectedServiceName": {
              "description": "Registry Connection",
              "type": "string"
            },
            "PrivateRegistryImage": {
              "description": "Image",
              "type": "string"
            },
            "PrivateRegistryTag": {
              "description": "Tag",
              "type": "string"
            },
            "DockerNamespace": {
              "description": "Registry or Namespace",
              "type": "string"
            },
            "DockerRepository": {
              "description": "Image",
              "type": "string"
            },
            "DockerImageTag": {
              "description": "Tag",
              "type": "string"
            },
            "VirtualApplication": {
              "description": "Virtual application",
              "type": "string"
            },
            "Package": {
              "description": "Package or folder",
              "type": "string"
            },
            "BuiltinLinuxPackage": {
              "description": "Package or folder",
              "type": "string"
            },
            "RuntimeStack": {
              "description": "Runtime Stack",
              "enum": [
                "node|4.4",
                "node|4.5",
                "node|6.2",
                "node|6.6",
                "node|6.9",
                "node|6.10",
                "node|6.11",
                "node|8.0",
                "node|8.1",
                "php|5.6",
                "php|7.0",
                "dotnetcore|1.0",
                "dotnetcore|1.1",
                "dotnetcore|2.0",
                "ruby|2.3"
              ]
            },
            "StartupCommand": {
              "description": "Startup command ",
              "type": "string"
            },
            "WebAppUri": {
              "description": "App Service URL",
              "type": "string"
            },
            "ScriptType": {
              "description": "Deployment script type",
              "enum": [
                "",
                "Inline Script",
                "File Path"
              ]
            },
            "InlineScript": {
              "description": "Inline Script",
              "type": "string"
            },
            "ScriptPath": {
              "description": "Deployment script path",
              "type": "string"
            },
            "GenerateWebConfig": {
              "description": "Generate Web.config",
              "type": "boolean"
            },
            "WebConfigParameters": {
              "description": "Web.config parameters",
              "type": "string"
            },
            "AppSettings": {
              "description": "App settings",
              "type": "string"
            },
            "ConfigurationSettings": {
              "description": "Configuration settings",
              "type": "string"
            },
            "TakeAppOfflineFlag": {
              "description": "Take App Offline",
              "type": "boolean"
            },
            "UseWebDeploy": {
              "description": "Publish using Web Deploy",
              "type": "boolean"
            },
            "SetParametersFile": {
              "description": "SetParameters file",
              "type": "string"
            },
            "RemoveAdditionalFilesFlag": {
              "description": "Remove additional files at destination",
              "type": "boolean"
            },
            "ExcludeFilesFromAppDataFlag": {
              "description": "Exclude files from the App_Data folder",
              "type": "boolean"
            },
            "AdditionalArguments": {
              "description": "Additional arguments",
              "type": "string"
            },
            "RenameFilesFlag": {
              "description": "Rename locked files",
              "type": "boolean"
            },
            "XmlTransformation": {
              "description": "XML transformation",
              "type": "boolean"
            },
            "XmlVariableSubstitution": {
              "description": "XML variable substitution",
              "type": "boolean"
            },
            "JSONFiles": {
              "description": "JSON variable substitution",
              "type": "string"
            }
          },
          "description": "Azure App Service Deploy inputs",
          "required": [
            "ConnectedServiceName",
            "WebAppName"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[aA][zZ][uU][rR][eE][rR][mM][wW][eE][bB][aA][pP][pP][dD][eE][pP][lL][oO][yY][mM][eE][nN][tT]@4$",
          "description": "Azure App Service Deploy\n\nUpdate Azure WebApp Services On Windows, Web App On Linux with built-in images or docker containers, ASP.NET, .NET Core, PHP, Python or Node based Web applications, Function Apps, Mobile Apps, Api applications, Web Jobs using Web Deploy / Kudu REST APIs"
        },
        "inputs": {
          "properties": {
            "ConnectionType": {
              "description": "Connection type",
              "enum": [
                "AzureRM",
                "PublishProfile"
              ]
            },
            "ConnectedServiceName": {
              "description": "Azure subscription",
              "type": "string"
            },
            "PublishProfilePath": {
              "description": "Publish profile path",
              "type": "string"
            },
            "PublishProfilePassword": {
              "description": "Publish profile password",
              "type": "string"
            },
            "WebAppKind": {
              "description": "App Service type",
              "enum": [
                "webApp",
                "webAppLinux",
                "webAppContainer",
                "functionApp",
                "apiApp",
                "mobileApp"
              ]
            },
            "WebAppName": {
              "description": "App Service name",
              "type": "string"
            },
            "DeployToSlotOrASEFlag": {
              "description": "Deploy to Slot or App Service Environment",
              "type": "boolean"
            },
            "ResourceGroupName": {
              "description": "Resource group",
              "type": "string"
            },
            "SlotName": {
              "description": "Slot",
              "type": "string"
            },
            "DockerNamespace": {
              "description": "Registry or Namespace",
              "type": "string"
            },
            "DockerRepository": {
              "description": "Image",
              "type": "string"
            },
            "DockerImageTag": {
              "description": "Tag",
              "type": "string"
            },
            "VirtualApplication": {
              "description": "Virtual application",
              "type": "string"
            },
            "Package": {
              "description": "Package or folder",
              "type": "string"
            },
            "RuntimeStack": {
              "description": "Runtime Stack",
              "type": "string"
            },
            "StartupCommand": {
              "description": "Startup command ",
              "type": "string"
            },
            "ScriptType": {
              "description": "Deployment script type",
              "enum": [
                "",
                "Inline Script",
                "File Path"
              ]
            },
            "InlineScript": {
              "description": "Inline Script",
              "type": "string"
            },
            "ScriptPath": {
              "description": "Deployment script path",
              "type": "string"
            },
            "WebConfigParameters": {
              "description": "Generate web.config parameters for Python, Node.js and Go apps",
              "type": "string"
            },
            "AppSettings": {
              "description": "App settings",
              "type": "string"
            },
            "ConfigurationSettings": {
              "description": "Configuration settings",
              "type": "string"
            },
            "UseWebDeploy": {
              "description": "Select deployment method",
              "type": "boolean"
            },
            "DeploymentType": {
              "description": "Deployment method",
              "enum": [
                "webDeploy",
                "zipDeploy",
                "runFromZip"
              ]
            },
            "TakeAppOfflineFlag": {
              "description": "Take App Offline",
              "type": "boolean"
            },
            "SetParametersFile": {
              "description": "SetParameters file",
              "type": "string"
            },
            "RemoveAdditionalFilesFlag": {
              "description": "Remove additional files at destination",
              "type": "boolean"
            },
            "ExcludeFilesFromAppDataFlag": {
              "description": "Exclude files from the App_Data folder",
              "type": "boolean"
            },
            "AdditionalArguments": {
              "description": "Additional arguments",
              "type": "string"
            },
            "RenameFilesFlag": {
              "description": "Rename locked files",
              "type": "boolean"
            },
            "XmlTransformation": {
              "description": "XML transformation",
              "type": "boolean"
            },
            "XmlVariableSubstitution": {
              "description": "XML variable substitution",
              "type": "boolean"
            },
            "JSONFiles": {
              "description": "JSON variable substitution",
              "type": "string"
            }
          },
          "description": "Azure App Service Deploy inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[aA][zZ][uU][rR][eE][vV][mM][sS][sS][dD][eE][pP][lL][oO][yY][mM][eE][nN][tT]@0$",
          "description": "Azure VM scale set Deployment\n\nDeploy Virtual Machine scale set image"
        },
        "inputs": {
          "properties": {
            "ConnectedServiceName": {
              "description": "Azure subscription",
              "type": "string"
            },
            "action": {
              "description": "Action",
              "enum": [
                "Update image",
                "Configure application startup"
              ]
            },
            "vmssName": {
              "description": "Virtual Machine scale set name",
              "type": "string"
            },
            "vmssOsType": {
              "description": "OS type",
              "enum": [
                "Windows",
                "Linux"
              ]
            },
            "imageUrl": {
              "description": "Image URL",
              "type": "string"
            },
            "customScriptsDirectory": {
              "description": "Custom script directory",
              "type": "string"
            },
            "customScript": {
              "description": "Command",
              "type": "string"
            },
            "customScriptArguments": {
              "description": "Arguments",
              "type": "string"
            },
            "customScriptsStorageAccount": {
              "description": "Azure storage account where custom scripts will be uploaded",
              "type": "string"
            },
            "skipArchivingCustomScripts": {
              "description": "Skip Archiving custom scripts",
              "type": "boolean"
            }
          },
          "description": "Azure VM scale set Deployment inputs",
          "required": [
            "ConnectedServiceName",
            "vmssName",
            "vmssOsType",
            "imageUrl"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[bB][aA][sS][hH]@3$",
          "description": "Bash\n\nRun a Bash script on macOS, Linux, or Windows"
        },
        "inputs": {
          "properties": {
            "targetType": {
              "description": "Type",
              "enum": [
                "filePath",
                "inline"
              ]
            },
            "filePath": {
              "description": "Script Path",
              "type": "string"
            },
            "arguments": {
              "description": "Arguments",
              "type": "string"
            },
            "script": {
              "description": "Script",
              "type": "string"
            },
            "workingDirectory": {
              "description": "Working Directory",
              "type": "string"
            },
            "failOnStderr": {
              "description": "Fail on Standard Error",
              "type": "boolean"
            }
          },
          "description": "Bash inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[bB][aA][tT][cC][hH][sS][cC][rR][iI][pP][tT]@1$",
          "description": "Batch Script\n\nRun a windows cmd or bat script and optionally allow it to change the environment"
        },
        "inputs": {
          "properties": {
            "filename": {
              "description": "Path",
              "type": "string"
            },
            "arguments": {
              "description": "Arguments",
              "type": "string"
            },
            "modifyEnvironment": {
              "description": "Modify Environment",
              "type": "boolean"
            },
            "workingFolder": {
              "description": "Working folder",
              "type": "string"
            },
            "failOnStandardError": {
              "description": "Fail on Standard Error",
              "type": "boolean"
            }
          },
          "description": "Batch Script inputs",
          "required": [
            "filename"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[cC][hH][eE][fF]@1$",
          "description": "Chef\n\nDeploy to Chef environments by editing environment attributes"
        },
        "inputs": {
          "properties": {
            "connectedServiceName": {
              "description": "Chef Service Connection",
              "type": "string"
            },
            "Environment": {
              "description": "Environment",
              "type": "string"
            },
            "Attributes": {
              "description": "Environment Attributes",
              "type": "string"
            },
            "chefWaitTime": {
              "description": "Wait Time",
              "type": "string"
            }
          },
          "description": "Chef inputs",
          "required": [
            "connectedServiceName",
            "Environment",
            "Attributes"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[cC][hH][eE][fF][kK][nN][iI][fF][eE]@1$",
          "description": "Chef Knife\n\nRun Scripts with knife commands on your chef workstation"
        },
        "inputs": {
          "properties": {
            "ConnectedServiceName": {
              "description": "Chef Subscription",
              "type": "string"
            },
            "ScriptPath": {
              "description": "Script Path",
              "type": "string"
            },
            "ScriptArguments": {
              "description": "Script Arguments",
              "type": "string"
            }
          },
          "description": "Chef Knife inputs",
          "required": [
            "ConnectedServiceName",
            "ScriptPath"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[cC][mM][aA][kK][eE]@1$",
          "description": "CMake\n\nBuild with the CMake cross-platform build system"
        },
        "inputs": {
          "properties": {
            "cwd": {
              "description": "Working Directory",
              "type": "string"
            },
            "cmakeArgs": {
              "description": "Arguments",
              "type": "string"
            }
          },
          "description": "CMake inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[cC][mM][dD][lL][iI][nN][eE]@2$",
          "description": "Command Line\n\nRun a command line script using cmd.exe on Windows and bash on macOS and Linux."
        },
        "inputs": {
          "properties": {
            "script": {
              "description": "Script",
              "type": "string"
            },
            "workingDirectory": {
              "description": "Working Directory",
              "type": "string"
            },
            "failOnStderr": {
              "description": "Fail on Standard Error",
              "type": "boolean"
            }
          },
          "description": "Command Line inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[cC][oO][cC][oO][aA][pP][oO][dD][sS]@0$",
          "description": "CocoaPods\n\nCocoaPods is a dependency manager for Swift and Objective-C Cocoa projects. This task runs 'pod install'."
        },
        "inputs": {
          "properties": {
            "cwd": {
              "description": "Working directory",
              "type": "string"
            },
            "forceRepoUpdate": {
              "description": "Force repo update",
              "type": "boolean"
            },
            "projectDirectory": {
              "description": "Project directory",
              "type": "string"
            }
          },
          "description": "CocoaPods inputs",
          "required": [
            "forceRepoUpdate"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[cC][oO][nN][dD][aA][eE][nN][vV][iI][rR][oO][nN][mM][eE][nN][tT]@1$",
          "description": "Conda Environment\n\nCreate and activate a Conda environment."
        },
        "inputs": {
          "properties": {
            "createCustomEnvironment": {
              "description": "Create a custom environment",
              "type": "boolean"
            },
            "environmentName": {
              "description": "Environment name",
              "type": "string"
            },
            "packageSpecs": {
              "description": "Package specs",
              "type": "string"
            },
            "updateConda": {
              "description": "Update to the latest Conda",
              "type": "boolean"
            },
            "installOptions": {
              "description": "Other options for `conda install`",
              "type": "string"
            },
            "createOptions": {
              "description": "Other options for `conda create`",
              "type": "string"
            },
            "cleanEnvironment": {
              "description": "Clean the environment",
              "type": "boolean"
            }
          },
          "description": "Conda Environment inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[cC][oO][pP][yY][fF][iI][lL][eE][sS]@2$",
          "description": "Copy Files\n\nCopy files from source folder to target folder using match patterns (The match patterns will only match file paths, not folder paths)"
        },
        "inputs": {
          "properties": {
            "SourceFolder": {
              "description": "Source Folder",
              "type": "string"
            },
            "Contents": {
              "description": "Contents",
              "type": "string"
            },
            "TargetFolder": {
              "description": "Target Folder",
              "type": "string"
            },
            "CleanTargetFolder": {
              "description": "Clean Target Folder",
              "type": "boolean"
            },
            "OverWrite": {
              "description": "Overwrite",
              "type": "boolean"
            },
            "flattenFolders": {
              "description": "Flatten Folders",
              "type": "boolean"
            }
          },
          "description": "Copy Files inputs",
          "required": [
            "TargetFolder"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[cC][oO][pP][yY][fF][iI][lL][eE][sS][oO][vV][eE][rR][sS][sS][hH]@0$",
          "description": "Copy Files Over SSH\n\nCopy files or build artifacts to a remote machine over SSH"
        },
        "inputs": {
          "properties": {
            "sshEndpoint": {
              "description": "SSH service connection",
              "type": "string"
            },
            "sourceFolder": {
              "description": "Source folder",
              "type": "string"
            },
            "contents": {
              "description": "Contents",
              "type": "string"
            },
            "targetFolder": {
              "description": "Target folder",
              "type": "string"
            },
            "cleanTargetFolder": {
              "description": "Clean target folder",
              "type": "boolean"
            },
            "overwrite": {
              "description": "Overwrite",
              "type": "boolean"
            },
            "failOnEmptySource": {
              "description": "Fail if no files found to copy",
              "type": "boolean"
            },
            "flattenFolders": {
              "description": "Flatten folders",
              "type": "boolean"
            }
          },
          "description": "Copy Files Over SSH inputs",
          "required": [
            "sshEndpoint"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[cC][uU][rR][lL][uU][pP][lL][oO][aA][dD][eE][rR]@2$",
          "description": "cURL Upload Files\n\nUse cURL to upload files with FTP, FTPS, SFTP, HTTP, and more."
        },
        "inputs": {
          "properties": {
            "files": {
              "description": "Files",
              "type": "string"
            },
            "authType": {
              "description": "Authentication Method",
              "enum": [
                "ServiceEndpoint",
                "UserAndPass"
              ]
            },
            "serviceEndpoint": {
              "description": "Service Connection",
              "type": "string"
            },
            "username": {
              "description": "Username",
              "type": "string"
            },
            "password": {
              "description": "Password",
              "type": "string"
            },
            "url": {
              "description": "URL",
              "type": "string"
            },
            "remotePath": {
              "description": "Remote Directory",
              "type": "string"
            },
            "options": {
              "description": "Optional Arguments",
              "type": "string"
            },
            "redirectStderr": {
              "description": "Redirect Standard Error to Standard Out",
              "type": "boolean"
            }
          },
          "description": "cURL Upload Files inputs",
          "required": [
            "files"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[dD][eE][cC][rR][yY][pP][tT][fF][iI][lL][eE]@1$",
          "description": "Decrypt File (OpenSSL)\n\nA thin utility task for file decryption using OpenSSL."
        },
        "inputs": {
          "properties": {
            "cipher": {
              "description": "Cypher",
              "type": "string"
            },
            "inFile": {
              "description": "Encrypted file",
              "type": "string"
            },
            "passphrase": {
              "description": "Passphrase",
              "type": "string"
            },
            "outFile": {
              "description": "Decrypted file path",
              "type": "string"
            },
            "cwd": {
              "description": "Working directory",
              "type": "string"
            }
          },
          "description": "Decrypt File (OpenSSL) inputs",
          "required": [
            "inFile",
            "passphrase"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[dD][eE][lL][aA][yY]@1$",
          "description": "Delay\n\nDelay further execution of the workflow by a fixed time."
        },
        "inputs": {
          "properties": {
            "delayForMinutes": {
              "description": "Delay Time (minutes)",
              "type": "string"
            }
          },
          "description": "Delay inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[dD][eE][lL][eE][tT][eE][fF][iI][lL][eE][sS]@1$",
          "description": "Delete Files\n\nDelete files or folders. (The minimatch patterns will only match file paths, not folder paths)"
        },
        "inputs": {
          "properties": {
            "SourceFolder": {
              "description": "Source Folder",
              "type": "string"
            },
            "Contents": {
              "description": "Contents",
              "type": "string"
            }
          },
          "description": "Delete Files inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[dD][eE][pP][lL][oO][yY][vV][iI][sS][uU][aA][lL][sS][tT][uU][dD][iI][oO][tT][eE][sS][tT][aA][gG][eE][nN][tT]@2$",
          "description": "Visual Studio Test Agent Deployment\n\nDeprecated: This task and it’s companion task (Run Functional Tests) are deprecated. Use the 'Visual Studio Test' task instead. The VSTest task can run unit as well as functional tests. Run tests on one or more agents using the multi-agent phase setting. Use the 'Visual Studio Test Platform' task to run tests without needing Visual Studio on the agent. VSTest task also brings new capabilities such as automatically rerunning failed tests."
        },
        "inputs": {
          "properties": {
            "testMachines": {
              "description": "Machines",
              "type": "string"
            },
            "adminUserName": {
              "description": "Admin login",
              "type": "string"
            },
            "adminPassword": {
              "description": "Admin password",
              "type": "string"
            },
            "winRmProtocol": {
              "description": "Protocol",
              "enum": [
                "Http",
                "Https"
              ]
            },
            "testCertificate": {
              "description": "Test Certificate",
              "type": "boolean"
            },
            "machineUserName": {
              "description": "Username",
              "type": "string"
            },
            "machinePassword": {
              "description": "Password",
              "type": "string"
            },
            "runAsProcess": {
              "description": "Run UI tests",
              "type": "boolean"
            },
            "isDataCollectionOnly": {
              "description": "Enable data collection only",
              "type": "boolean"
            },
            "testPlatform": {
              "description": "Test agent version",
              "enum": [
                "15.0",
                "14.0"
              ]
            },
            "agentLocation": {
              "description": "Test agent location",
              "type": "string"
            },
            "updateTestAgent": {
              "description": "Update test agent",
              "type": "boolean"
            }
          },
          "description": "Visual Studio Test Agent Deployment inputs",
          "required": [
            "testMachines",
            "adminUserName",
            "adminPassword",
            "machineUserName",
            "machinePassword"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[dD][oO][cC][kK][eE][rR]@0$",
          "description": "Docker\n\nBuild, tag, push, or run Docker images, or run a Docker command. Task can be used with Docker or Azure Container registry."
        },
        "inputs": {
          "properties": {
            "containerregistrytype": {
              "description": "Container Registry Type",
              "enum": [
                "Azure Container Registry",
                "Container Registry"
              ]
            },
            "dockerRegistryEndpoint": {
              "description": "Docker Registry Service Connection",
              "type": "string"
            },
            "azureSubscriptionEndpoint": {
              "description": "Azure subscription",
              "type": "string"
            },
            "azureContainerRegistry": {
              "description": "Azure Container Registry",
              "type": "string"
            },
            "action": {
              "description": "Action",
              "enum": [
                "Build an image",
                "Tag images",
                "Push an image",
                "Push images",
                "Run an image",
                "Run a Docker command"
              ]
            },
            "dockerFile": {
              "description": "Docker File",
              "type": "string"
            },
            "buildArguments": {
              "description": "Build Arguments",
              "type": "string"
            },
            "defaultContext": {
              "description": "Use Default Build Context",
              "type": "boolean"
            },
            "context": {
              "description": "Build Context",
              "type": "string"
            },
            "imageName": {
              "description": "Image Name",
              "type": "string"
            },
            "imageNamesPath": {
              "description": "Image Names Path",
              "type": "string"
            },
            "qualifyImageName": {
              "description": "Qualify Image Name",
              "type": "boolean"
            },
            "additionalImageTags": {
              "description": "Additional Image Tags",
              "type": "string"
            },
            "includeSourceTags": {
              "description": "Include Source Tags",
              "type": "boolean"
            },
            "includeLatestTag": {
              "description": "Include Latest Tag",
              "type": "boolean"
            },
            "imageDigestFile": {
              "description": "Image Digest File",
              "type": "string"
            },
            "containerName": {
              "description": "Container Name",
              "type": "string"
            },
            "ports": {
              "description": "Ports",
              "type": "string"
            },
            "volumes": {
              "description": "Volumes",
              "type": "string"
            },
            "envVars": {
              "description": "Environment Variables",
              "type": "string"
            },
            "workDir": {
              "description": "Working Directory",
              "type": "string"
            },
            "entrypoint": {
              "description": "Entry Point Override",
              "type": "string"
            },
            "containerCommand": {
              "description": "Command",
              "type": "string"
            },
            "detached": {
              "description": "Run In Background",
              "type": "boolean"
            },
            "restartPolicy": {
              "description": "Restart Policy",
              "enum": [
                "no",
                "onFailure",
                "always",
                "unlessStopped"
              ]
            },
            "restartMaxRetries": {
              "description": "Maximum Restart Retries",
              "type": "string"
            },
            "customCommand": {
              "description": "Command",
              "type": "string"
            },
            "dockerHostEndpoint": {
              "description": "Docker Host Service Connection",
              "type": "string"
            },
            "enforceDockerNamingConvention": {
              "description": "Force image name to follow Docker naming convention",
              "type": "boolean"
            },
            "cwd": {
              "description": "Working Directory",
              "type": "string"
            },
            "memory": {
              "description": "Memory limit",
              "type": "string"
            }
          },
          "description": "Docker inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[dD][oO][cC][kK][eE][rR]@1$",
          "description": "Docker\n\nBuild, tag, push, or run Docker images, or run a Docker command. Task can be used with Docker or Azure Container registry."
        },
        "inputs": {
          "properties": {
            "containerregistrytype": {
              "description": "Container registry type",
              "enum": [
                "Azure Container Registry",
                "Container Registry"
              ]
            },
            "dockerRegistryEndpoint": {
              "description": "Docker registry service connection",
              "type": "string"
            },
            "azureSubscriptionEndpoint": {
              "description": "Azure subscription",
              "type": "string"
            },
            "azureContainerRegistry": {
              "description": "Azure container registry",
              "type": "string"
            },
            "command": {
              "description": "Command",
              "enum": [
                "Build an image",
                "Tag image",
                "Push an image",
                "Run an image"
              ]
            },
            "dockerFile": {
              "description": "Dockerfile",
              "type": "string"
            },
            "arguments": {
              "description": "Arguments",
              "type": "string"
            },
            "useDefaultContext": {
              "description": "Use default build context",
              "type": "boolean"
            },
            "buildContext": {
              "description": "Build context",
              "type": "string"
            },
            "pushMultipleImages": {
              "description": "Push multiple images",
              "type": "boolean"
            },
            "tagMultipleImages": {
              "description": "Tag multiple images",
              "type": "boolean"
            },
            "imageName": {
              "description": "Image name",
              "type": "string"
            },
            "imageNamesPath": {
              "description": "Image names path",
              "type": "string"
            },
            "qualifyImageName": {
              "description": "Qualify image name",
              "type": "boolean"
            },
            "includeSourceTags": {
              "description": "Include source tags",
              "type": "boolean"
            },
            "includeLatestTag": {
              "description": "Include latest tag",
              "type": "boolean"
            },
            "addDefaultLabels": {
              "description": "Add default labels",
              "type": "boolean"
            },
            "imageDigestFile": {
              "description": "Image digest file",
              "type": "string"
            },
            "containerName": {
              "description": "Container name",
              "type": "string"
            },
            "ports": {
              "description": "Ports",
              "type": "string"
            },
            "volumes": {
              "description": "Volumes",
              "type": "string"
            },
            "envVars": {
              "description": "Environment variables",
              "type": "string"
            },
            "workingDirectory": {
              "description": "Working directory",
              "type": "string"
            },
            "entrypointOverride": {
              "description": "Entry point override",
              "type": "string"
            },
            "containerCommand": {
              "description": "Command",
              "type": "string"
            },
            "runInBackground": {
              "description": "Run in background",
              "type": "boolean"
            },
            "restartPolicy": {
              "description": "Restart policy",
              "enum": [
                "no",
                "onFailure",
                "always",
                "unlessStopped"
              ]
            },
            "maxRestartRetries": {
              "description": "Maximum restart retries",
              "type": "string"
            },
            "dockerHostEndpoint": {
              "description": "Docker host service connection",
              "type": "string"
            },
            "enforceDockerNamingConvention": {
              "description": "Force image name to follow Docker naming convention",
              "type": "boolean"
            },
            "memoryLimit": {
              "description": "Memory limit",
              "type": "string"
            }
          },
          "description": "Docker inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[dD][oO][cC][kK][eE][rR][cC][oO][mM][pP][oO][sS][eE]@0$",
          "description": "Docker Compose\n\nBuild, push or run multi-container Docker applications. Task can be used with Docker or Azure Container registry."
        },
        "inputs": {
          "properties": {
            "containerregistrytype": {
              "description": "Container Registry Type",
              "enum": [
                "Azure Container Registry",
                "Container Registry"
              ]
            },
            "dockerRegistryEndpoint": {
              "description": "Docker Registry Service Connection",
              "type": "string"
            },
            "azureSubscriptionEndpoint": {
              "description": "Azure subscription",
              "type": "string"
            },
            "azureContainerRegistry": {
              "description": "Azure Container Registry",
              "type": "string"
            },
            "dockerComposeFile": {
              "description": "Docker Compose File",
              "type": "string"
            },
            "additionalDockerComposeFiles": {
              "description": "Additional Docker Compose Files",
              "type": "string"
            },
            "dockerComposeFileArgs": {
              "description": "Environment Variables",
              "type": "string"
            },
            "projectName": {
              "description": "Project Name",
              "type": "string"
            },
            "qualifyImageNames": {
              "description": "Qualify Image Names",
              "type": "boolean"
            },
            "action": {
              "description": "Action",
              "enum": [
                "Build services",
                "Push services",
                "Run services",
                "Run a specific service",
                "Lock services",
                "Write service image digests",
                "Combine configuration",
                "Run a Docker Compose command"
              ]
            },
            "additionalImageTags": {
              "description": "Additional Image Tags",
              "type": "string"
            },
            "includeSourceTags": {
              "description": "Include Source Tags",
              "type": "boolean"
            },
            "includeLatestTag": {
              "description": "Include Latest Tag",
              "type": "boolean"
            },
            "buildImages": {
              "description": "Build Images",
              "type": "boolean"
            },
            "serviceName": {
              "description": "Service Name",
              "type": "string"
            },
            "containerName": {
              "description": "Container Name",
              "type": "string"
            },
            "ports": {
              "description": "Ports",
              "type": "string"
            },
            "workDir": {
              "description": "Working Directory",
              "type": "string"
            },
            "entrypoint": {
              "description": "Entry Point Override",
              "type": "string"
            },
            "containerCommand": {
              "description": "Command",
              "type": "string"
            },
            "detached": {
              "description": "Run in Background",
              "type": "boolean"
            },
            "abortOnContainerExit": {
              "description": "Abort on Container Exit",
              "type": "boolean"
            },
            "imageDigestComposeFile": {
              "description": "Image Digest Compose File",
              "type": "string"
            },
            "removeBuildOptions": {
              "description": "Remove Build Options",
              "type": "boolean"
            },
            "baseResolveDirectory": {
              "description": "Base Resolve Directory",
              "type": "string"
            },
            "outputDockerComposeFile": {
              "description": "Output Docker Compose File",
              "type": "string"
            },
            "dockerComposeCommand": {
              "description": "Command",
              "type": "string"
            },
            "dockerHostEndpoint": {
              "description": "Docker Host Service Connection",
              "type": "string"
            },
            "nopIfNoDockerComposeFile": {
              "description": "No-op if no Docker Compose File",
              "type": "boolean"
            },
            "requireAdditionalDockerComposeFiles": {
              "description": "Require Additional Docker Compose Files",
              "type": "boolean"
            },
            "cwd": {
              "description": "Working Directory",
              "type": "string"
            }
          },
          "description": "Docker Compose inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[dD][oO][tT][nN][eE][tT][cC][oO][rR][eE][cC][lL][iI]@2$",
          "description": ".NET Core\n\nBuild, test, package, or publish a dotnet application, or run a custom dotnet command. For package commands, supports NuGet.org and authenticated feeds like Package Management and MyGet."
        },
        "inputs": {
          "properties": {
            "command": {
              "description": "Command",
              "enum": [
                "build",
                "push",
                "pack",
                "publish",
                "restore",
                "run",
                "test",
                "custom"
              ]
            },
            "publishWebProjects": {
              "description": "Publish Web Projects",
              "type": "boolean"
            },
            "projects": {
              "description": "Path to project(s)",
              "type": "string"
            },
            "custom": {
              "description": "Custom command",
              "type": "string"
            },
            "arguments": {
              "description": "Arguments",
              "type": "string"
            },
            "publishTestResults": {
              "description": "Publish test results",
              "type": "boolean"
            },
            "zipAfterPublish": {
              "description": "Zip Published Projects",
              "type": "boolean"
            },
            "modifyOutputPath": {
              "description": "Add project name to publish path",
              "type": "boolean"
            },
            "selectOrConfig": {
              "description": "Feeds to use",
              "enum": [
                "select",
                "config"
              ]
            },
            "feedRestore": {
              "description": "Use packages from this VSTS/TFS feed",
              "type": "string"
            },
            "includeNuGetOrg": {
              "description": "Use packages from NuGet.org",
              "type": "boolean"
            },
            "nugetConfigPath": {
              "description": "Path to NuGet.config",
              "type": "string"
            },
            "externalEndpoints": {
              "description": "Credentials for feeds outside this account/collection",
              "type": "string"
            },
            "noCache": {
              "description": "Disable local cache",
              "type": "boolean"
            },
            "packagesDirectory": {
              "description": "Destination directory",
              "type": "string"
            },
            "verbosityRestore": {
              "description": "Verbosity",
              "enum": [
                "-",
                "Quiet",
                "Minimal",
                "Normal",
                "Detailed",
                "Diagnostic"
              ]
            },
            "searchPatternPush": {
              "description": "Path to NuGet package(s) to publish",
              "type": "string"
            },
            "nuGetFeedType": {
              "description": "Target feed location",
              "enum": [
                "internal",
                "external"
              ]
            },
            "feedPublish": {
              "description": "Target feed",
              "type": "string"
            },
            "externalEndpoint": {
              "description": "NuGet server",
              "type": "string"
            },
            "searchPatternPack": {
              "description": "Path to csproj or nuspec file(s) to pack",
              "type": "string"
            },
            "configurationToPack": {
              "description": "Configuration to Package",
              "type": "string"
            },
            "outputDir": {
              "description": "Package Folder",
              "type": "string"
            },
            "nobuild": {
              "description": "Do not build",
              "type": "boolean"
            },
            "versioningScheme": {
              "description": "Automatic package versioning",
              "enum": [
                "off",
                "byPrereleaseNumber",
                "byEnvVar",
                "byBuildNumber"
              ]
            },
            "versionEnvVar": {
              "description": "Environment variable",
              "type": "string"
            },
            "requestedMajorVersion": {
              "description": "Major",
              "type": "string"
            },
            "requestedMinorVersion": {
              "description": "Minor",
              "type": "string"
            },
            "requestedPatchVersion": {
              "description": "Patch",
              "type": "string"
            },
            "buildProperties": {
              "description": "Additional build properties",
              "type": "string"
            },
            "verbosityPack": {
              "description": "Verbosity",
              "enum": [
                "-",
                "Quiet",
                "Minimal",
                "Normal",
                "Detailed",
                "Diagnostic"
              ]
            },
            "workingDirectory": {
              "description": "Working Directory",
              "type": "string"
            }
          },
          "description": ".NET Core inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[dD][oO][tT][nN][eE][tT][cC][oO][rR][eE][iI][nN][sS][tT][aA][lL][lL][eE][rR]@0$",
          "description": ".NET Core Tool Installer\n\nAcquires a specific version of .NET Core from internet or the tools cache and adds it to the PATH. Use this task to change the version of .NET Core used in subsequent tasks."
        },
        "inputs": {
          "properties": {
            "packageType": {
              "description": "Package to install",
              "enum": [
                "runtime",
                "sdk"
              ]
            },
            "version": {
              "description": "Version",
              "type": "string"
            }
          },
          "description": ".NET Core Tool Installer inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[dD][oO][wW][nN][lL][oO][aA][dD][bB][uU][iI][lL][dD][aA][rR][tT][iI][fF][aA][cC][tT][sS]@0$",
          "description": "Download Build Artifacts\n\nDownload Build Artifacts"
        },
        "inputs": {
          "properties": {
            "buildType": {
              "description": "Download artifacts produced by",
              "enum": [
                "current",
                "specific"
              ]
            },
            "project": {
              "description": "Project",
              "type": "string"
            },
            "definition": {
              "description": "Build pipeline",
              "type": "string"
            },
            "specificBuildWithTriggering": {
              "description": "When appropriate, download artifacts from the triggering build.",
              "type": "boolean"
            },
            "buildVersionToDownload": {
              "description": "Build version to download",
              "enum": [
                "latest",
                "latestFromBranch",
                "specific"
              ]
            },
            "branchName": {
              "description": "Branch name",
              "type": "string"
            },
            "buildId": {
              "description": "Build",
              "type": "string"
            },
            "downloadType": {
              "description": "Download type",
              "enum": [
                "single",
                "specific"
              ]
            },
            "artifactName": {
              "description": "Artifact name",
              "type": "string"
            },
            "itemPattern": {
              "description": "Matching pattern",
              "type": "string"
            },
            "downloadPath": {
              "description": "Destination directory",
              "type": "string"
            },
            "parallelizationLimit": {
              "description": "Parallelization limit",
              "type": "string"
            }
          },
          "description": "Download Build Artifacts inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[dD][oO][wW][nN][lL][oO][aA][dD][fF][iI][lL][eE][sS][hH][aA][rR][eE][aA][rR][tT][iI][fF][aA][cC][tT][sS]@1$",
          "description": "Download Fileshare Artifacts\n\nDownload artifacts from a file share e.g \\\\share\\drop"
        },
        "inputs": {
          "properties": {
            "filesharePath": {
              "description": "Fileshare path",
              "type": "string"
            },
            "artifactName": {
              "description": "Artifact name",
              "type": "string"
            },
            "itemPattern": {
              "description": "Matching pattern",
              "type": "string"
            },
            "downloadPath": {
              "description": "Download path",
              "type": "string"
            },
            "parallelizationLimit": {
              "description": "Parallelization limit",
              "type": "string"
            }
          },
          "description": "Download Fileshare Artifacts inputs",
          "required": [
            "filesharePath",
            "artifactName"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[dD][oO][wW][nN][lL][oO][aA][dD][pP][aA][cC][kK][aA][gG][eE]@0$",
          "description": "Download Package\n\nDownload a package from a Package Management feed in VSTS or TFS.  Requires the Package Management extension."
        },
        "inputs": {
          "properties": {
            "feed": {
              "description": "Feed",
              "type": "string"
            },
            "definition": {
              "description": "Package",
              "type": "string"
            },
            "version": {
              "description": "Version",
              "type": "string"
            },
            "downloadPath": {
              "description": "Destination directory",
              "type": "string"
            }
          },
          "description": "Download Package inputs",
          "required": [
            "feed",
            "definition",
            "version"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[dD][oO][wW][nN][lL][oO][aA][dD][sS][eE][cC][uU][rR][eE][fF][iI][lL][eE]@1$",
          "description": "Download Secure File\n\nDownload a secure file to a temporary location on the build or release agent"
        },
        "inputs": {
          "properties": {
            "secureFile": {
              "description": "Secure File"
            }
          },
          "description": "Download Secure File inputs",
          "required": [
            "secureFile"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[eE][xX][tT][rR][aA][cC][tT][fF][iI][lL][eE][sS]@1$",
          "description": "Extract Files\n\nExtract a variety of archive and compression files such as .7z, .rar, .tar.gz, and .zip."
        },
        "inputs": {
          "properties": {
            "archiveFilePatterns": {
              "description": "Archive file patterns",
              "type": "string"
            },
            "destinationFolder": {
              "description": "Destination folder",
              "type": "string"
            },
            "cleanDestinationFolder": {
              "description": "Clean destination folder before extracting",
              "type": "boolean"
            }
          },
          "description": "Extract Files inputs",
          "required": [
            "destinationFolder"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[fF][tT][pP][uU][pP][lL][oO][aA][dD]@1$",
          "description": "FTP Upload\n\nFTP Upload"
        },
        "inputs": {
          "properties": {
            "credsType": {
              "description": "Authentication Method",
              "enum": [
                "serviceEndpoint",
                "inputs"
              ]
            },
            "serverEndpoint": {
              "description": "FTP Service Connection",
              "type": "string"
            },
            "serverUrl": {
              "description": "Server URL",
              "type": "string"
            },
            "username": {
              "description": "Username",
              "type": "string"
            },
            "password": {
              "description": "Password",
              "type": "string"
            },
            "rootFolder": {
              "description": "Root folder",
              "type": "string"
            },
            "filePatterns": {
              "description": "File patterns",
              "type": "string"
            },
            "remotePath": {
              "description": "Remote directory",
              "type": "string"
            },
            "clean": {
              "description": "Delete remote directory",
              "type": "boolean"
            },
            "cleanContents": {
              "description": "Clear remote directory contents",
              "type": "boolean"
            },
            "overwrite": {
              "description": "Overwrite",
              "type": "boolean"
            },
            "preservePaths": {
              "description": "Preserve file paths",
              "type": "boolean"
            },
            "trustSSL": {
              "description": "Trust server certificate",
              "type": "boolean"
            }
          },
          "description": "FTP Upload inputs",
          "required": [
            "rootFolder"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[gG][oO]@0$",
          "description": "Go\n\nGet, build, or test a Go application, or run a custom Go command."
        },
        "inputs": {
          "properties": {
            "command": {
              "description": "Command",
              "enum": [
                "get",
                "build",
                "test",
                "custom"
              ]
            },
            "customCommand": {
              "description": "Custom command",
              "type": "string"
            },
            "arguments": {
              "description": "Arguments",
              "type": "string"
            },
            "workingDirectory": {
              "description": "Working directory",
              "type": "string"
            }
          },
          "description": "Go inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[gG][oO][tT][oO][oO][lL]@0$",
          "description": "Go Tool Installer\n\nFinds or downloads a specific version of Go in the tools cache and adds it to the PATH. Use this to set the version of Go used in subsequent tasks."
        },
        "inputs": {
          "properties": {
            "version": {
              "description": "Version",
              "type": "string"
            },
            "goPath": {
              "description": "GOPATH",
              "type": "string"
            },
            "goBin": {
              "description": "GOBIN",
              "type": "string"
            }
          },
          "description": "Go Tool Installer inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[gG][rR][aA][dD][lL][eE]@2$",
          "description": "Gradle\n\nBuild using a Gradle wrapper script"
        },
        "inputs": {
          "properties": {
            "wrapperScript": {
              "description": "Gradle wrapper",
              "type": "string"
            },
            "cwd": {
              "description": "Working directory",
              "type": "string"
            },
            "options": {
              "description": "Options",
              "type": "string"
            },
            "tasks": {
              "description": "Tasks",
              "type": "string"
            },
            "publishJUnitResults": {
              "description": "Publish to TFS/Team Services",
              "type": "boolean"
            },
            "testResultsFiles": {
              "description": "Test results files",
              "type": "string"
            },
            "testRunTitle": {
              "description": "Test run title",
              "type": "string"
            },
            "codeCoverageTool": {
              "description": "Code coverage tool",
              "enum": [
                "None",
                "Cobertura",
                "JaCoCo"
              ]
            },
            "classFilesDirectories": {
              "description": "Class files directories",
              "type": "string"
            },
            "classFilter": {
              "description": "Class inclusion/exclusion filters",
              "type": "string"
            },
            "failIfCoverageEmpty": {
              "description": "Fail when code coverage results are missing",
              "type": "boolean"
            },
            "javaHomeSelection": {
              "description": "Set JAVA_HOME by",
              "enum": [
                "JDKVersion",
                "Path"
              ]
            },
            "jdkVersion": {
              "description": "JDK version",
              "enum": [
                "default",
                "1.10",
                "1.9",
                "1.8",
                "1.7",
                "1.6"
              ]
            },
            "jdkUserInputPath": {
              "description": "JDK path",
              "type": "string"
            },
            "jdkArchitecture": {
              "description": "JDK architecture",
              "enum": [
                "x86",
                "x64"
              ]
            },
            "gradleOpts": {
              "description": "Set GRADLE_OPTS",
              "type": "string"
            },
            "sqAnalysisEnabled": {
              "description": "Run SonarQube or SonarCloud Analysis",
              "type": "boolean"
            },
            "sqGradlePluginVersionChoice": {
              "description": "SonarQube scanner for Gradle version",
              "enum": [
                "specify",
                "build"
              ]
            },
            "sqGradlePluginVersion": {
              "description": "SonarQube scanner for Gradle plugin version",
              "type": "string"
            },
            "checkstyleAnalysisEnabled": {
              "description": "Run Checkstyle",
              "type": "boolean"
            },
            "findbugsAnalysisEnabled": {
              "description": "Run FindBugs",
              "type": "boolean"
            },
            "pmdAnalysisEnabled": {
              "description": "Run PMD",
              "type": "boolean"
            }
          },
          "description": "Gradle inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[gG][rR][uU][nN][tT]@0$",
          "description": "Grunt\n\nThe JavaScript Task Runner"
        },
        "inputs": {
          "properties": {
            "gruntFile": {
              "description": "Grunt File Path",
              "type": "string"
            },
            "targets": {
              "description": "Grunt Task(s)",
              "type": "string"
            },
            "arguments": {
              "description": "Arguments",
              "type": "string"
            },
            "cwd": {
              "description": "Working Directory",
              "type": "string"
            },
            "gruntCli": {
              "description": "grunt-cli location",
              "type": "string"
            },
            "publishJUnitResults": {
              "description": "Publish to TFS/Team Services",
              "type": "boolean"
            },
            "testResultsFiles": {
              "description": "Test Results Files",
              "type": "string"
            },
            "testRunTitle": {
              "description": "Test Run Title",
              "type": "string"
            },
            "enableCodeCoverage": {
              "description": "Enable Code Coverage",
              "type": "boolean"
            },
            "testFramework": {
              "description": "Test Framework",
              "enum": [
                "Mocha",
                "Jasmine"
              ]
            },
            "srcFiles": {
              "description": "Source Files",
              "type": "string"
            },
            "testFiles": {
              "description": "Test Script Files",
              "type": "string"
            }
          },
          "description": "Grunt inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[gG][uU][lL][pP]@0$",
          "description": "Gulp\n\nNode.js streaming task based build system"
        },
        "inputs": {
          "properties": {
            "gulpFile": {
              "description": "Gulp File Path",
              "type": "string"
            },
            "targets": {
              "description": "Gulp Task(s)",
              "type": "string"
            },
            "arguments": {
              "description": "Arguments",
              "type": "string"
            },
            "cwd": {
              "description": "Working Directory",
              "type": "string"
            },
            "gulpjs": {
              "description": "gulp.js location",
              "type": "string"
            },
            "publishJUnitResults": {
              "description": "Publish to TFS/Team Services",
              "type": "boolean"
            },
            "testResultsFiles": {
              "description": "Test Results Files",
              "type": "string"
            },
            "testRunTitle": {
              "description": "Test Run Title",
              "type": "string"
            },
            "enableCodeCoverage": {
              "description": "Enable code Coverage",
              "type": "boolean"
            },
            "testFramework": {
              "description": "Test Framework",
              "enum": [
                "Mocha",
                "Jasmine"
              ]
            },
            "srcFiles": {
              "description": "Source Files",
              "type": "string"
            },
            "testFiles": {
              "description": "Test Script Files",
              "type": "string"
            }
          },
          "description": "Gulp inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[hH][eE][lL][mM][dD][eE][pP][lL][oO][yY]@0$",
          "description": "Package and deploy Helm charts\n\nDeploy, configure, update your Kubernetes cluster in Azure Container Service by running helm commands."
        },
        "inputs": {
          "properties": {
            "connectionType": {
              "description": "Connection Type",
              "enum": [
                "Azure Resource Manager",
                "Kubernetes Service Connection"
              ]
            },
            "azureSubscriptionEndpoint": {
              "description": "Azure subscription",
              "type": "string"
            },
            "azureResourceGroup": {
              "description": "Resource group",
              "type": "string"
            },
            "kubernetesCluster": {
              "description": "Kubernetes cluster",
              "type": "string"
            },
            "kubernetesServiceEndpoint": {
              "description": "Kubernetes Service Connection",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace",
              "type": "string"
            },
            "command": {
              "description": "Command",
              "enum": [
                "create",
                "delete",
                "expose",
                "get",
                "init",
                "install",
                "ls",
                "package",
                "rollback",
                "upgrade"
              ]
            },
            "chartType": {
              "description": "Chart Type",
              "enum": [
                "Name",
                "FilePath"
              ]
            },
            "chartName": {
              "description": "Chart Name",
              "type": "string"
            },
            "chartPath": {
              "description": "Chart Path",
              "type": "string"
            },
            "version": {
              "description": "Version",
              "type": "string"
            },
            "releaseName": {
              "description": "Release Name",
              "type": "string"
            },
            "overrideValues": {
              "description": "Set Values",
              "type": "string"
            },
            "valueFile": {
              "description": "Value File",
              "type": "string"
            },
            "destination": {
              "description": "Destination",
              "type": "string"
            },
            "canaryimage": {
              "description": "Use canary image version.",
              "type": "boolean"
            },
            "upgradetiller": {
              "description": "Upgrade Tiller",
              "type": "boolean"
            },
            "updatedependency": {
              "description": "Update Dependency",
              "type": "boolean"
            },
            "save": {
              "description": "Save",
              "type": "boolean"
            },
            "install": {
              "description": "Install if release not present.",
              "type": "boolean"
            },
            "recreate": {
              "description": "Recreate Pods.",
              "type": "boolean"
            },
            "resetValues": {
              "description": "Reset Values.",
              "type": "boolean"
            },
            "force": {
              "description": "Force",
              "type": "boolean"
            },
            "waitForExecution": {
              "description": "Wait",
              "type": "boolean"
            },
            "arguments": {
              "description": "Arguments",
              "type": "string"
            },
            "enableTls": {
              "description": "Enable TLS",
              "type": "boolean"
            },
            "caCert": {
              "description": "CA certificate"
            },
            "certificate": {
              "description": "Certificate"
            },
            "privatekey": {
              "description": "Key"
            },
            "tillernamespace": {
              "description": "Tiller namespace",
              "type": "string"
            }
          },
          "description": "Package and deploy Helm charts inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[hH][eE][lL][mM][iI][nN][sS][tT][aA][lL][lL][eE][rR]@0$",
          "description": "Helm tool installer\n\nInstall Helm and Kubernetes on agent machine."
        },
        "inputs": {
          "properties": {
            "helmVersion": {
              "description": "Helm Version Spec",
              "type": "string"
            },
            "checkLatestHelmVersion": {
              "description": "Check for latest version of Helm",
              "type": "boolean"
            },
            "installKubeCtl": {
              "description": "Install Kubectl",
              "type": "boolean"
            },
            "kubectlVersion": {
              "description": "Kubectl Version Spec",
              "type": "string"
            },
            "checkLatestKubeCtl": {
              "description": "Check for latest version of kubectl",
              "type": "boolean"
            }
          },
          "description": "Helm tool installer inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[iI][iI][sS][wW][eE][bB][aA][pP][pP][dD][eE][pP][lL][oO][yY][mM][eE][nN][tT][oO][nN][mM][aA][cC][hH][iI][nN][eE][gG][rR][oO][uU][pP]@0$",
          "description": "IIS Web App Deploy\n\nDeploy a Website or Web Application using WebDeploy"
        },
        "inputs": {
          "properties": {
            "WebSiteName": {
              "description": "Website Name",
              "type": "string"
            },
            "VirtualApplication": {
              "description": "Virtual Application",
              "type": "string"
            },
            "Package": {
              "description": "Package or Folder",
              "type": "string"
            },
            "SetParametersFile": {
              "description": "SetParameters File",
              "type": "string"
            },
            "RemoveAdditionalFilesFlag": {
              "description": "Remove Additional Files at Destination",
              "type": "boolean"
            },
            "ExcludeFilesFromAppDataFlag": {
              "description": "Exclude Files from the App_Data Folder",
              "type": "boolean"
            },
            "TakeAppOfflineFlag": {
              "description": "Take App Offline",
              "type": "boolean"
            },
            "AdditionalArguments": {
              "description": "Additional Arguments",
              "type": "string"
            },
            "XmlTransformation": {
              "description": "XML transformation",
              "type": "boolean"
            },
            "XmlVariableSubstitution": {
              "description": "XML variable substitution",
              "type": "boolean"
            },
            "JSONFiles": {
              "description": "JSON variable substitution",
              "type": "string"
            }
          },
          "description": "IIS Web App Deploy inputs",
          "required": [
            "WebSiteName"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[iI][iI][sS][wW][eE][bB][aA][pP][pP][mM][aA][nN][aA][gG][eE][mM][eE][nN][tT][oO][nN][mM][aA][cC][hH][iI][nN][eE][gG][rR][oO][uU][pP]@0$",
          "description": "IIS Web App Manage\n\nCreate or update a Website, Web App, Virtual Directories, and Application Pool"
        },
        "inputs": {
          "properties": {
            "EnableIIS": {
              "description": "Enable IIS",
              "type": "boolean"
            },
            "IISDeploymentType": {
              "description": "Configuration type",
              "enum": [
                "IISWebsite",
                "IISWebApplication",
                "IISVirtualDirectory",
                "IISApplicationPool"
              ]
            },
            "ActionIISWebsite": {
              "description": "Action",
              "enum": [
                "CreateOrUpdateWebsite",
                "StartWebsite",
                "StopWebsite"
              ]
            },
            "ActionIISApplicationPool": {
              "description": "Action",
              "enum": [
                "CreateOrUpdateAppPool",
                "StartAppPool",
                "StopAppPool",
                "RecycleAppPool"
              ]
            },
            "StartStopWebsiteName": {
              "description": "Website name",
              "type": "string"
            },
            "WebsiteName": {
              "description": "Website name",
              "type": "string"
            },
            "WebsitePhysicalPath": {
              "description": "Physical path",
              "type": "string"
            },
            "WebsitePhysicalPathAuth": {
              "description": "Physical path authentication",
              "enum": [
                "WebsiteUserPassThrough",
                "WebsiteWindowsAuth"
              ]
            },
            "WebsiteAuthUserName": {
              "description": "Username",
              "type": "string"
            },
            "WebsiteAuthUserPassword": {
              "description": "Password",
              "type": "string"
            },
            "AddBinding": {
              "description": "Add binding",
              "type": "boolean"
            },
            "Protocol": {
              "description": "Protocol",
              "enum": [
                "https",
                "http"
              ]
            },
            "IPAddress": {
              "description": "IP address",
              "type": "string"
            },
            "Port": {
              "description": "Port",
              "type": "string"
            },
            "ServerNameIndication": {
              "description": "Server Name Indication required",
              "type": "boolean"
            },
            "HostNameWithOutSNI": {
              "description": "Host name",
              "type": "string"
            },
            "HostNameWithHttp": {
              "description": "Host name",
              "type": "string"
            },
            "HostNameWithSNI": {
              "description": "Host name",
              "type": "string"
            },
            "SSLCertThumbPrint": {
              "description": "SSL certificate thumbprint",
              "type": "string"
            },
            "Bindings": {
              "description": "Add bindings",
              "type": "string"
            },
            "CreateOrUpdateAppPoolForWebsite": {
              "description": "Create or update app pool",
              "type": "boolean"
            },
            "ConfigureAuthenticationForWebsite": {
              "description": "Configure authentication",
              "type": "boolean"
            },
            "AppPoolNameForWebsite": {
              "description": "Name",
              "type": "string"
            },
            "DotNetVersionForWebsite": {
              "description": ".NET version",
              "enum": [
                "v4.0",
                "v2.0",
                "No Managed Code"
              ]
            },
            "PipeLineModeForWebsite": {
              "description": "Managed pipeline mode",
              "enum": [
                "Integrated",
                "Classic"
              ]
            },
            "AppPoolIdentityForWebsite": {
              "description": "Identity",
              "enum": [
                "ApplicationPoolIdentity",
                "LocalService",
                "LocalSystem",
                "NetworkService",
                "SpecificUser"
              ]
            },
            "AppPoolUsernameForWebsite": {
              "description": "Username",
              "type": "string"
            },
            "AppPoolPasswordForWebsite": {
              "description": "Password",
              "type": "string"
            },
            "AnonymousAuthenticationForWebsite": {
              "description": "Anonymous authentication",
              "type": "boolean"
            },
            "BasicAuthenticationForWebsite": {
              "description": "Basic authentication",
              "type": "boolean"
            },
            "WindowsAuthenticationForWebsite": {
              "description": "Windows authentication",
              "type": "boolean"
            },
            "ParentWebsiteNameForVD": {
              "description": "Parent website name",
              "type": "string"
            },
            "VirtualPathForVD": {
              "description": "Virtual path",
              "type": "string"
            },
            "PhysicalPathForVD": {
              "description": "Physical path",
              "type": "string"
            },
            "VDPhysicalPathAuth": {
              "description": "Physical path authentication",
              "enum": [
                "VDUserPassThrough",
                "VDWindowsAuth"
              ]
            },
            "VDAuthUserName": {
              "description": "Username",
              "type": "string"
            },
            "VDAuthUserPassword": {
              "description": "Password",
              "type": "string"
            },
            "ParentWebsiteNameForApplication": {
              "description": "Parent website name",
              "type": "string"
            },
            "VirtualPathForApplication": {
              "description": "Virtual path",
              "type": "string"
            },
            "PhysicalPathForApplication": {
              "description": "Physical path",
              "type": "string"
            },
            "ApplicationPhysicalPathAuth": {
              "description": "Physical path authentication",
              "enum": [
                "ApplicationUserPassThrough",
                "ApplicationWindowsAuth"
              ]
            },
            "ApplicationAuthUserName": {
              "description": "Username",
              "type": "string"
            },
            "ApplicationAuthUserPassword": {
              "description": "Password",
              "type": "string"
            },
            "CreateOrUpdateAppPoolForApplication": {
              "description": "Create or update app pool",
              "type": "boolean"
            },
            "AppPoolNameForApplication": {
              "description": "Name",
              "type": "string"
            },
            "DotNetVersionForApplication": {
              "description": ".NET version",
              "enum": [
                "v4.0",
                "v2.0",
                "No Managed Code"
              ]
            },
            "PipeLineModeForApplication": {
              "description": "Managed pipeline mode",
              "enum": [
                "Integrated",
                "Classic"
              ]
            },
            "AppPoolIdentityForApplication": {
              "description": "Identity",
              "enum": [
                "ApplicationPoolIdentity",
                "LocalService",
                "LocalSystem",
                "NetworkService",
                "SpecificUser"
              ]
            },
            "AppPoolUsernameForApplication": {
              "description": "Username",
              "type": "string"
            },
            "AppPoolPasswordForApplication": {
              "description": "Password",
              "type": "string"
            },
            "AppPoolName": {
              "description": "Name",
              "type": "string"
            },
            "DotNetVersion": {
              "description": ".NET version",
              "enum": [
                "v4.0",
                "v2.0",
                "No Managed Code"
              ]
            },
            "PipeLineMode": {
              "description": "Managed pipeline mode",
              "enum": [
                "Integrated",
                "Classic"
              ]
            },
            "AppPoolIdentity": {
              "description": "Identity",
              "enum": [
                "ApplicationPoolIdentity",
                "LocalService",
                "LocalSystem",
                "NetworkService",
                "SpecificUser"
              ]
            },
            "AppPoolUsername": {
              "description": "Username",
              "type": "string"
            },
            "AppPoolPassword": {
              "description": "Password",
              "type": "string"
            },
            "StartStopRecycleAppPoolName": {
              "description": "Application pool name",
              "type": "string"
            },
            "AppCmdCommands": {
              "description": "Additional appcmd.exe commands",
              "type": "string"
            }
          },
          "description": "IIS Web App Manage inputs",
          "required": [
            "WebsiteName",
            "Bindings",
            "AppPoolNameForWebsite",
            "ParentWebsiteNameForVD",
            "VirtualPathForVD",
            "ParentWebsiteNameForApplication",
            "VirtualPathForApplication",
            "AppPoolNameForApplication",
            "AppPoolName"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[iI][nN][sS][tT][aA][lL][lL][aA][pP][pP][lL][eE][cC][eE][rR][tT][iI][fF][iI][cC][aA][tT][eE]@2$",
          "description": "Install Apple Certificate\n\nInstall an Apple certificate required to build on a macOS agent"
        },
        "inputs": {
          "properties": {
            "certSecureFile": {
              "description": "Certificate (P12)"
            },
            "certPwd": {
              "description": "Certificate (P12) password",
              "type": "string"
            },
            "keychain": {
              "description": "Keychain",
              "enum": [
                "default",
                "temp",
                "custom"
              ]
            },
            "keychainPassword": {
              "description": "Keychain password",
              "type": "string"
            },
            "customKeychainPath": {
              "description": "Custom keychain path",
              "type": "string"
            },
            "deleteCert": {
              "description": "Delete certificate from keychain",
              "type": "boolean"
            },
            "deleteCustomKeychain": {
              "description": "Delete custom keychain",
              "type": "boolean"
            },
            "signingIdentity": {
              "description": "Certificate signing identity",
              "type": "string"
            }
          },
          "description": "Install Apple Certificate inputs",
          "required": [
            "certSecureFile"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[iI][nN][sS][tT][aA][lL][lL][aA][pP][pP][lL][eE][pP][rR][oO][vV][iI][sS][iI][oO][nN][iI][nN][gG][pP][rR][oO][fF][iI][lL][eE]@1$",
          "description": "Install Apple Provisioning Profile\n\nInstall an Apple provisioning profile required to build on a macOS agent"
        },
        "inputs": {
          "properties": {
            "provisioningProfileLocation": {
              "description": "Provisioning profile location",
              "enum": [
                "secureFiles",
                "sourceRepository"
              ]
            },
            "provProfileSecureFile": {
              "description": "Provisioning profile"
            },
            "provProfileSourceRepository": {
              "description": "Provisioning profile",
              "type": "string"
            },
            "removeProfile": {
              "description": "Remove profile after build",
              "type": "boolean"
            }
          },
          "description": "Install Apple Provisioning Profile inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[iI][nN][sS][tT][aA][lL][lL][sS][sS][hH][kK][eE][yY]@0$",
          "description": "Install SSH Key\n\nInstall an SSH key prior to a build or release"
        },
        "inputs": {
          "properties": {
            "hostName": {
              "description": "Known Hosts Entry",
              "type": "string"
            },
            "sshPublicKey": {
              "description": "SSH Public Key",
              "type": "string"
            },
            "sshPassphrase": {
              "description": "SSH Passphrase",
              "type": "string"
            },
            "sshKeySecureFile": {
              "description": "SSH Key"
            }
          },
          "description": "Install SSH Key inputs",
          "required": [
            "hostName",
            "sshPublicKey",
            "sshKeySecureFile"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[iI][nN][vV][oO][kK][eE][rR][eE][sS][tT][aA][pP][iI]@1$",
          "description": "Invoke REST API\n\nInvoke REST API as a part of your process."
        },
        "inputs": {
          "properties": {
            "connectedServiceNameSelector": {
              "description": "Connection type",
              "enum": [
                "connectedServiceName",
                "connectedServiceNameARM"
              ]
            },
            "connectedServiceName": {
              "description": "Generic service connection",
              "type": "string"
            },
            "connectedServiceNameARM": {
              "description": "Azure subscription",
              "type": "string"
            },
            "method": {
              "description": "Method",
              "enum": [
                "OPTIONS",
                "GET",
                "HEAD",
                "POST",
                "PUT",
                "DELETE",
                "TRACE",
                "PATCH"
              ]
            },
            "headers": {
              "description": "Headers",
              "type": "string"
            },
            "body": {
              "description": "Body",
              "type": "string"
            },
            "urlSuffix": {
              "description": "URL suffix and parameters",
              "type": "string"
            },
            "waitForCompletion": {
              "description": "Completion event",
              "enum": [
                "true",
                "false"
              ]
            },
            "successCriteria": {
              "description": "Success criteria",
              "type": "string"
            }
          },
          "description": "Invoke REST API inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[jJ][aA][vV][aA][tT][oO][oO][lL][iI][nN][sS][tT][aA][lL][lL][eE][rR]@0$",
          "description": "Java Tool Installer\n\nAcquires a specific version of Java from a user supplied Azure blob or the tools cache and sets JAVA_HOME. Use this task to change the version of Java used in Java tasks."
        },
        "inputs": {
          "properties": {
            "versionSpec": {
              "description": "JDK version",
              "type": "string"
            },
            "jdkArchitectureOption": {
              "description": "JDK architecture",
              "enum": [
                "x64",
                "x86"
              ]
            },
            "jdkSourceOption": {
              "description": "JDK source",
              "enum": [
                "AzureStorage",
                "LocalDirectory"
              ]
            },
            "jdkFile": {
              "description": "JDK file",
              "type": "string"
            },
            "azureResourceManagerEndpoint": {
              "description": "Azure subscription",
              "type": "string"
            },
            "azureStorageAccountName": {
              "description": "Storage account name",
              "type": "string"
            },
            "azureContainerName": {
              "description": "Container name",
              "type": "string"
            },
            "azureCommonVirtualFile": {
              "description": "Common virtual path",
              "type": "string"
            },
            "jdkDestinationDirectory": {
              "description": "Destination directory",
              "type": "string"
            },
            "cleanDestinationDirectory": {
              "description": "Clean destination directory",
              "type": "boolean"
            }
          },
          "description": "Java Tool Installer inputs",
          "required": [
            "jdkArchitectureOption",
            "jdkSourceOption",
            "jdkDestinationDirectory"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[jJ][eE][nN][kK][iI][nN][sS][dD][oO][wW][nN][lL][oO][aA][dD][aA][rR][tT][iI][fF][aA][cC][tT][sS]@1$",
          "description": "Jenkins Download Artifacts\n\nDownload artifacts produced by a Jenkins job"
        },
        "inputs": {
          "properties": {
            "serverEndpoint": {
              "description": "Jenkins service connection",
              "type": "string"
            },
            "jobName": {
              "description": "Job name",
              "type": "string"
            },
            "jenkinsJobType": {
              "description": "Jenkins job type",
              "type": "string"
            },
            "saveTo": {
              "description": "Save to",
              "type": "string"
            },
            "jenkinsBuild": {
              "description": "Download artifacts produced by",
              "enum": [
                "LastSuccessfulBuild",
                "BuildNumber"
              ]
            },
            "jenkinsBuildNumber": {
              "description": "Jenkins build number",
              "type": "string"
            },
            "itemPattern": {
              "description": "Item Pattern",
              "type": "string"
            },
            "downloadCommitsAndWorkItems": {
              "description": "Download Commits and WorkItems",
              "type": "boolean"
            },
            "startJenkinsBuildNumber": {
              "description": "Download commits and work items from",
              "type": "string"
            },
            "artifactDetailsFileNameSuffix": {
              "description": "Commit and WorkItem FileName",
              "type": "string"
            },
            "propagatedArtifacts": {
              "description": "Artifacts are propagated to Azure",
              "type": "boolean"
            },
            "artifactProvider": {
              "description": "Artifact Provider",
              "enum": [
                "azureStorage"
              ]
            },
            "ConnectedServiceNameARM": {
              "description": "Azure Subscription",
              "type": "string"
            },
            "storageAccountName": {
              "description": "Storage Account Name",
              "type": "string"
            },
            "containerName": {
              "description": "Container Name",
              "type": "string"
            },
            "commonVirtualPath": {
              "description": "Common Virtual Path",
              "type": "string"
            }
          },
          "description": "Jenkins Download Artifacts inputs",
          "required": [
            "serverEndpoint",
            "jobName"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[jJ][eE][nN][kK][iI][nN][sS][qQ][uU][eE][uU][eE][jJ][oO][bB]@2$",
          "description": "Jenkins Queue Job\n\nQueue a job on a Jenkins server"
        },
        "inputs": {
          "properties": {
            "serverEndpoint": {
              "description": "Jenkins service connection",
              "type": "string"
            },
            "jobName": {
              "description": "Job name",
              "type": "string"
            },
            "isMultibranchJob": {
              "description": "Job is of multibranch pipeline type",
              "type": "boolean"
            },
            "multibranchPipelineBranch": {
              "description": "Multibranch pipeline branch",
              "type": "string"
            },
            "captureConsole": {
              "description": "Capture console output and wait for completion",
              "type": "boolean"
            },
            "capturePipeline": {
              "description": "Capture pipeline output and wait for pipeline completion",
              "type": "boolean"
            },
            "parameterizedJob": {
              "description": "Parameterized job",
              "type": "boolean"
            },
            "jobParameters": {
              "description": "Job parameters",
              "type": "string"
            }
          },
          "description": "Jenkins Queue Job inputs",
          "required": [
            "serverEndpoint",
            "jobName",
            "captureConsole",
            "parameterizedJob"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[kK][uU][bB][eE][rR][nN][eE][tT][eE][sS]@0$",
          "description": "Deploy to Kubernetes\n\nDeploy, configure, update your Kubernetes cluster in Azure Container Service by running kubectl commands."
        },
        "inputs": {
          "properties": {
            "kubernetesServiceEndpoint": {
              "description": "Kubernetes service connection",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace",
              "type": "string"
            },
            "command": {
              "description": "Command",
              "enum": [
                "apply",
                "create",
                "delete",
                "exec",
                "expose",
                "get",
                "logs",
                "run",
                "set",
                "top"
              ]
            },
            "useConfigurationFile": {
              "description": "Use Configuration files",
              "type": "boolean"
            },
            "configuration": {
              "description": "Configuration file",
              "type": "string"
            },
            "arguments": {
              "description": "Arguments",
              "type": "string"
            },
            "secretType": {
              "description": "Type of secret",
              "enum": [
                "dockerRegistry",
                "generic"
              ]
            },
            "secretArguments": {
              "description": "Arguments",
              "type": "string"
            },
            "containerRegistryType": {
              "description": "Container Registry type",
              "enum": [
                "Azure Container Registry",
                "Container Registry"
              ]
            },
            "dockerRegistryEndpoint": {
              "description": "Docker Registry service connection",
              "type": "string"
            },
            "azureSubscriptionEndpoint": {
              "description": "Azure subscription",
              "type": "string"
            },
            "azureContainerRegistry": {
              "description": "Azure Container Registry",
              "type": "string"
            },
            "secretName": {
              "description": "Secret name",
              "type": "string"
            },
            "forceUpdate": {
              "description": "Force update secret",
              "type": "boolean"
            },
            "configMapName": {
              "description": "ConfigMap name",
              "type": "string"
            },
            "forceUpdateConfigMap": {
              "description": "Force update configmap",
              "type": "boolean"
            },
            "useConfigMapFile": {
              "description": "Use file",
              "type": "boolean"
            },
            "configMapFile": {
              "description": "ConfigMap file",
              "type": "string"
            },
            "configMapArguments": {
              "description": "Arguments",
              "type": "string"
            },
            "versionOrLocation": {
              "description": "Kubectl",
              "enum": [
                "version",
                "location"
              ]
            },
            "versionSpec": {
              "description": "Version spec",
              "type": "string"
            },
            "checkLatest": {
              "description": "Check for latest version",
              "type": "boolean"
            },
            "specifyLocation": {
              "description": "Path to Kubectl",
              "type": "string"
            },
            "cwd": {
              "description": "Working directory",
              "type": "string"
            },
            "outputFormat": {
              "description": "Output format",
              "enum": [
                "json",
                "yaml"
              ]
            },
            "kubectlOutput": {
              "description": "Output variable name",
              "type": "string"
            }
          },
          "description": "Deploy to Kubernetes inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[kK][uU][bB][eE][rR][nN][eE][tT][eE][sS]@1$",
          "description": "Deploy to Kubernetes\n\nDeploy, configure, update your Kubernetes cluster in Azure Container Service by running kubectl commands."
        },
        "inputs": {
          "properties": {
            "connectionType": {
              "description": "Service connection type",
              "enum": [
                "Azure Resource Manager",
                "Kubernetes Service Connection"
              ]
            },
            "kubernetesServiceEndpoint": {
              "description": "Kubernetes service connection",
              "type": "string"
            },
            "azureSubscriptionEndpoint": {
              "description": "Azure subscription",
              "type": "string"
            },
            "azureResourceGroup": {
              "description": "Resource group",
              "type": "string"
            },
            "kubernetesCluster": {
              "description": "Kubernetes cluster",
              "type": "string"
            },
            "namespace": {
              "description": "Namespace",
              "type": "string"
            },
            "command": {
              "description": "Command",
              "enum": [
                "apply",
                "create",
                "delete",
                "exec",
                "expose",
                "get",
                "logs",
                "run",
                "set",
                "top"
              ]
            },
            "useConfigurationFile": {
              "description": "Use configuration files",
              "type": "boolean"
            },
            "configuration": {
              "description": "Configuration file",
              "type": "string"
            },
            "arguments": {
              "description": "Arguments",
              "type": "string"
            },
            "secretType": {
              "description": "Type of secret",
              "enum": [
                "dockerRegistry",
                "generic"
              ]
            },
            "secretArguments": {
              "description": "Arguments",
              "type": "string"
            },
            "containerRegistryType": {
              "description": "Container registry type",
              "enum": [
                "Azure Container Registry",
                "Container Registry"
              ]
            },
            "dockerRegistryEndpoint": {
              "description": "Docker registry service connection",
              "type": "string"
            },
            "azureSubscriptionEndpointForSecrets": {
              "description": "Azure subscription",
              "type": "string"
            },
            "azureContainerRegistry": {
              "description": "Azure container registry",
              "type": "string"
            },
            "secretName": {
              "description": "Secret name",
              "type": "string"
            },
            "forceUpdate": {
              "description": "Force update secret",
              "type": "boolean"
            },
            "configMapName": {
              "description": "ConfigMap name",
              "type": "string"
            },
            "forceUpdateConfigMap": {
              "description": "Force update configmap",
              "type": "boolean"
            },
            "useConfigMapFile": {
              "description": "Use file",
              "type": "boolean"
            },
            "configMapFile": {
              "description": "ConfigMap file",
              "type": "string"
            },
            "configMapArguments": {
              "description": "Arguments",
              "type": "string"
            },
            "versionOrLocation": {
              "description": "Kubectl",
              "enum": [
                "version",
                "location"
              ]
            },
            "versionSpec": {
              "description": "Version spec",
              "type": "string"
            },
            "checkLatest": {
              "description": "Check for latest version",
              "type": "boolean"
            },
            "specifyLocation": {
              "description": "Path to kubectl",
              "type": "string"
            },
            "cwd": {
              "description": "Working directory",
              "type": "string"
            },
            "outputFormat": {
              "description": "Output format",
              "enum": [
                "json",
                "yaml"
              ]
            }
          },
          "description": "Deploy to Kubernetes inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[mM][aA][nN][uU][aA][lL][iI][nN][tT][eE][rR][vV][eE][nN][tT][iI][oO][nN]@8$",
          "description": "Manual Intervention\n\nPause deployment and wait for intervention"
        },
        "inputs": {
          "properties": {
            "instructions": {
              "description": "Instructions",
              "type": "string"
            },
            "emailRecipients": {
              "description": "Notify users"
            },
            "onTimeout": {
              "description": "On timeout",
              "enum": [
                "reject",
                "resume"
              ]
            }
          },
          "description": "Manual Intervention inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[mM][aA][vV][eE][nN]@2$",
          "description": "Maven\n\nBuild with Apache Maven"
        },
        "inputs": {
          "properties": {
            "mavenPOMFile": {
              "description": "Maven POM file",
              "type": "string"
            },
            "goals": {
              "description": "Goal(s)",
              "type": "string"
            },
            "options": {
              "description": "Options",
              "type": "string"
            },
            "publishJUnitResults": {
              "description": "Publish to TFS/Team Services",
              "type": "boolean"
            },
            "testResultsFiles": {
              "description": "Test results files",
              "type": "string"
            },
            "testRunTitle": {
              "description": "Test run title",
              "type": "string"
            },
            "codeCoverageTool": {
              "description": "Code coverage tool",
              "enum": [
                "None",
                "Cobertura",
                "JaCoCo"
              ]
            },
            "classFilter": {
              "description": "Class inclusion/exclusion filters",
              "type": "string"
            },
            "classFilesDirectories": {
              "description": "Class files directories",
              "type": "string"
            },
            "srcDirectories": {
              "description": "Source files directories",
              "type": "string"
            },
            "failIfCoverageEmpty": {
              "description": "Fail when code coverage results are missing",
              "type": "boolean"
            },
            "javaHomeSelection": {
              "description": "Set JAVA_HOME by",
              "enum": [
                "JDKVersion",
                "Path"
              ]
            },
            "jdkVersion": {
              "description": "JDK version",
              "enum": [
                "default",
                "1.10",
                "1.9",
                "1.8",
                "1.7",
                "1.6"
              ]
            },
            "jdkUserInputPath": {
              "description": "JDK path",
              "type": "string"
            },
            "jdkArchitecture": {
              "description": "JDK architecture",
              "enum": [
                "x86",
                "x64"
              ]
            },
            "mavenVersionSelection": {
              "description": "Maven version",
              "enum": [
                "Default",
                "Path"
              ]
            },
            "mavenPath": {
              "description": "Maven path",
              "type": "string"
            },
            "mavenSetM2Home": {
              "description": "Set M2_HOME variable",
              "type": "boolean"
            },
            "mavenOpts": {
              "description": "Set MAVEN_OPTS to",
              "type": "string"
            },
            "mavenFeedAuthenticate": {
              "description": "Authenticate built-in Maven feeds",
              "type": "boolean"
            },
            "sqAnalysisEnabled": {
              "description": "Run SonarQube or SonarCloud analysis",
              "type": "boolean"
            },
            "sqMavenPluginVersionChoice": {
              "description": "SonarQube scanner for Maven version",
              "enum": [
                "latest",
                "pom"
              ]
            },
            "checkstyleAnalysisEnabled": {
              "description": "Run Checkstyle",
              "type": "boolean"
            },
            "pmdAnalysisEnabled": {
              "description": "Run PMD",
              "type": "boolean"
            },
            "findbugsAnalysisEnabled": {
              "description": "Run FindBugs",
              "type": "boolean"
            }
          },
          "description": "Maven inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[mM][sS][bB][uU][iI][lL][dD]@1$",
          "description": "MSBuild\n\nBuild with MSBuild"
        },
        "inputs": {
          "properties": {
            "solution": {
              "description": "Project",
              "type": "string"
            },
            "msbuildLocationMethod": {
              "description": "MSBuild",
              "enum": [
                "version",
                "location"
              ]
            },
            "msbuildVersion": {
              "description": "MSBuild Version",
              "enum": [
                "latest",
                "15.0",
                "14.0",
                "12.0",
                "4.0"
              ]
            },
            "msbuildArchitecture": {
              "description": "MSBuild Architecture",
              "enum": [
                "x86",
                "x64"
              ]
            },
            "msbuildLocation": {
              "description": "Path to MSBuild",
              "type": "string"
            },
            "platform": {
              "description": "Platform",
              "type": "string"
            },
            "configuration": {
              "description": "Configuration",
              "type": "string"
            },
            "msbuildArguments": {
              "description": "MSBuild Arguments",
              "type": "string"
            },
            "clean": {
              "description": "Clean",
              "type": "boolean"
            },
            "maximumCpuCount": {
              "description": "Build in Parallel",
              "type": "boolean"
            },
            "restoreNugetPackages": {
              "description": "Restore NuGet Packages",
              "type": "boolean"
            },
            "logProjectEvents": {
              "description": "Record Project Details",
              "type": "boolean"
            },
            "createLogFile": {
              "description": "Create Log File",
              "type": "boolean"
            }
          },
          "description": "MSBuild inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[nN][oO][dD][eE][tT][oO][oO][lL]@0$",
          "description": "Node Tool Installer\n\nFinds or Downloads and caches specified version spec of Node and adds it to the PATH."
        },
        "inputs": {
          "properties": {
            "versionSpec": {
              "description": "Version Spec",
              "type": "string"
            },
            "checkLatest": {
              "description": "Check for Latest Version",
              "type": "boolean"
            }
          },
          "description": "Node Tool Installer inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[nN][pP][mM]@1$",
          "description": "npm\n\nInstall and publish npm packages, or run an npm command. Supports npmjs.com and authenticated registries like Package Management."
        },
        "inputs": {
          "properties": {
            "command": {
              "description": "Command",
              "enum": [
                "install",
                "publish",
                "custom"
              ]
            },
            "workingDir": {
              "description": "Working folder with package.json",
              "type": "string"
            },
            "verbose": {
              "description": "Verbose logging",
              "type": "boolean"
            },
            "customCommand": {
              "description": "Command and arguments",
              "type": "string"
            },
            "customRegistry": {
              "description": "Registries to use",
              "enum": [
                "useNpmrc",
                "useFeed"
              ]
            },
            "customFeed": {
              "description": "Use packages from this VSTS/TFS registry",
              "type": "string"
            },
            "customEndpoint": {
              "description": "Credentials for registries outside this account/collection",
              "type": "string"
            },
            "publishRegistry": {
              "description": "Registry location",
              "enum": [
                "useExternalRegistry",
                "useFeed"
              ]
            },
            "publishFeed": {
              "description": "Target registry",
              "type": "string"
            },
            "publishEndpoint": {
              "description": "External Registry",
              "type": "string"
            }
          },
          "description": "npm inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[nN][pP][mM][aA][uU][tT][hH][eE][nN][tT][iI][cC][aA][tT][eE]@0$",
          "description": "npm Authenticate (for task runners)\n\nDon't use this task if you're also using the npm task. Provides npm credentials to an .npmrc file in your repository for the scope of the build. This enables npm task runners like Gulp and Grunt to authenticate with private registries."
        },
        "inputs": {
          "properties": {
            "workingFile": {
              "description": ".npmrc file to authenticate",
              "type": "string"
            },
            "customEndpoint": {
              "description": "Credentials for registries outside this account/collection",
              "type": "string"
            }
          },
          "description": "npm Authenticate (for task runners) inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[nN][uU][gG][eE][tT]@0$",
          "description": "NuGet Command\n\nDeprecated: use the “NuGet” task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this account/collection, and uses NuGet 4 by default."
        },
        "inputs": {
          "properties": {
            "command": {
              "description": "Command",
              "type": "string"
            },
            "arguments": {
              "description": "Arguments",
              "type": "string"
            }
          },
          "description": "NuGet Command inputs",
          "required": [
            "command"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[nN][uU][gG][eE][tT][cC][oO][mM][mM][aA][nN][dD]@2$",
          "description": "NuGet\n\nRestore, pack, or push NuGet packages, or run a NuGet command. Supports NuGet.org and authenticated feeds like Package Management and MyGet. Uses NuGet.exe and works with .NET Framework apps. For .NET Core and .NET Standard apps, use the .NET Core task."
        },
        "inputs": {
          "properties": {
            "command": {
              "description": "Command",
              "enum": [
                "restore",
                "pack",
                "push",
                "custom"
              ]
            },
            "solution": {
              "description": "Path to solution, packages.config, or project.json",
              "type": "string"
            },
            "selectOrConfig": {
              "description": "Feeds to use",
              "enum": [
                "select",
                "config"
              ]
            },
            "feedRestore": {
              "description": "Use packages from this VSTS/TFS feed",
              "type": "string"
            },
            "includeNuGetOrg": {
              "description": "Use packages from NuGet.org",
              "type": "boolean"
            },
            "nugetConfigPath": {
              "description": "Path to NuGet.config",
              "type": "string"
            },
            "externalEndpoints": {
              "description": "Credentials for feeds outside this account/collection",
              "type": "string"
            },
            "noCache": {
              "description": "Disable local cache",
              "type": "boolean"
            },
            "disableParallelProcessing": {
              "description": "Disable parallel processing",
              "type": "boolean"
            },
            "packagesDirectory": {
              "description": "Destination directory",
              "type": "string"
            },
            "verbosityRestore": {
              "description": "Verbosity",
              "enum": [
                "Quiet",
                "Normal",
                "Detailed"
              ]
            },
            "searchPatternPush": {
              "description": "Path to NuGet package(s) to publish",
              "type": "string"
            },
            "nuGetFeedType": {
              "description": "Target feed location",
              "enum": [
                "internal",
                "external"
              ]
            },
            "feedPublish": {
              "description": "Target feed",
              "type": "string"
            },
            "allowPackageConflicts": {
              "description": "Allow duplicates to be skipped",
              "type": "boolean"
            },
            "externalEndpoint": {
              "description": "NuGet server",
              "type": "string"
            },
            "verbosityPush": {
              "description": "Verbosity",
              "enum": [
                "Quiet",
                "Normal",
                "Detailed"
              ]
            },
            "searchPatternPack": {
              "description": "Path to csproj or nuspec file(s) to pack",
              "type": "string"
            },
            "configurationToPack": {
              "description": "Configuration to package",
              "type": "string"
            },
            "outputDir": {
              "description": "Package folder",
              "type": "string"
            },
            "versioningScheme": {
              "description": "Automatic package versioning",
              "enum": [
                "off",
                "byPrereleaseNumber",
                "byEnvVar",
                "byBuildNumber"
              ]
            },
            "includeReferencedProjects": {
              "description": "Include referenced projects",
              "type": "boolean"
            },
            "versionEnvVar": {
              "description": "Environment variable",
              "type": "string"
            },
            "requestedMajorVersion": {
              "description": "Major",
              "type": "string"
            },
            "requestedMinorVersion": {
              "description": "Minor",
              "type": "string"
            },
            "requestedPatchVersion": {
              "description": "Patch",
              "type": "string"
            },
            "packTimezone": {
              "description": "Time zone",
              "enum": [
                "utc",
                "local"
              ]
            },
            "includeSymbols": {
              "description": "Create symbols package",
              "type": "boolean"
            },
            "toolPackage": {
              "description": "Tool Package",
              "type": "boolean"
            },
            "buildProperties": {
              "description": "Additional build properties",
              "type": "string"
            },
            "basePath": {
              "description": "Base path",
              "type": "string"
            },
            "verbosityPack": {
              "description": "Verbosity",
              "enum": [
                "Quiet",
                "Normal",
                "Detailed"
              ]
            },
            "arguments": {
              "description": "Command and arguments",
              "type": "string"
            }
          },
          "description": "NuGet inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[nN][uU][gG][eE][tT][pP][aA][cC][kK][aA][gG][eE][rR]@0$",
          "description": "NuGet Packager\n\nDeprecated: use the “NuGet” task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this account/collection, and uses NuGet 4 by default."
        },
        "inputs": {
          "properties": {
            "searchPattern": {
              "description": "Path to csproj or nuspec file(s) to pack",
              "type": "string"
            },
            "outputdir": {
              "description": "Package Folder",
              "type": "string"
            },
            "includeReferencedProjects": {
              "description": "Include referenced projects",
              "type": "boolean"
            },
            "versionByBuild": {
              "description": "Automatic package versioning",
              "enum": [
                "false",
                "byPrereleaseNumber",
                "byEnvVar",
                "true"
              ]
            },
            "versionEnvVar": {
              "description": "Environment variable",
              "type": "string"
            },
            "requestedMajorVersion": {
              "description": "Major",
              "type": "string"
            },
            "requestedMinorVersion": {
              "description": "Minor",
              "type": "string"
            },
            "requestedPatchVersion": {
              "description": "Patch",
              "type": "string"
            },
            "configurationToPack": {
              "description": "Configuration to Package",
              "type": "string"
            },
            "buildProperties": {
              "description": "Additional build properties",
              "type": "string"
            },
            "nuGetAdditionalArgs": {
              "description": "NuGet Arguments",
              "type": "string"
            },
            "nuGetPath": {
              "description": "Path to NuGet.exe",
              "type": "string"
            }
          },
          "description": "NuGet Packager inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[nN][uU][gG][eE][tT][pP][uU][bB][lL][iI][sS][hH][eE][rR]@0$",
          "description": "NuGet Publisher\n\nDeprecated: use the “NuGet” task instead. It works with the new Tool Installer framework so you can easily use new versions of NuGet without waiting for a task update, provides better support for authenticated feeds outside this account/collection, and uses NuGet 4 by default."
        },
        "inputs": {
          "properties": {
            "searchPattern": {
              "description": "Path/Pattern to nupkg",
              "type": "string"
            },
            "nuGetFeedType": {
              "description": "Feed type",
              "enum": [
                "external",
                "internal"
              ]
            },
            "connectedServiceName": {
              "description": "NuGet Service Connection",
              "type": "string"
            },
            "feedName": {
              "description": "Internal Feed URL",
              "type": "string"
            },
            "nuGetAdditionalArgs": {
              "description": "NuGet Arguments",
              "type": "string"
            },
            "verbosity": {
              "description": "Verbosity",
              "enum": [
                "-",
                "Quiet",
                "Normal",
                "Detailed"
              ]
            },
            "nuGetVersion": {
              "description": "NuGet Version",
              "enum": [
                "3.3.0",
                "3.5.0.1829",
                "4.0.0.2283",
                "custom"
              ]
            },
            "nuGetPath": {
              "description": "Path to NuGet.exe",
              "type": "string"
            },
            "continueOnEmptyNupkgMatch": {
              "description": "Continue if no packages match the \"Path/Pattern to nupkg\"",
              "type": "boolean"
            }
          },
          "description": "NuGet Publisher inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[nN][uU][gG][eE][tT][tT][oO][oO][lL][iI][nN][sS][tT][aA][lL][lL][eE][rR]@0$",
          "description": "NuGet Tool Installer\n\nAcquires a specific version of NuGet from the internet or the tools cache and adds it to the PATH. Use this task to change the version of NuGet used in the NuGet tasks."
        },
        "inputs": {
          "properties": {
            "versionSpec": {
              "description": "Version of NuGet.exe to install",
              "type": "string"
            },
            "checkLatest": {
              "description": "Always download the latest matching version",
              "type": "boolean"
            }
          },
          "description": "NuGet Tool Installer inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[pP][aA][cC][kK][eE][rR][bB][uU][iI][lL][dD]@0$",
          "description": "Build Machine Image\n\nBuild machine image using Packer. This image can be used for Azure Virtual machine scale set deployment"
        },
        "inputs": {
          "properties": {
            "templateType": {
              "description": "Packer template",
              "enum": [
                "builtin",
                "custom"
              ]
            },
            "customTemplateLocation": {
              "description": "Packer template location",
              "type": "string"
            },
            "customTemplateParameters": {
              "description": "Template parameters",
              "type": "string"
            },
            "ConnectedServiceName": {
              "description": "Azure subscription",
              "type": "string"
            },
            "location": {
              "description": "Storage location",
              "type": "string"
            },
            "storageAccountName": {
              "description": "Storage account",
              "type": "string"
            },
            "azureResourceGroup": {
              "description": "Resource group",
              "type": "string"
            },
            "baseImageSource": {
              "description": "Base image source",
              "enum": [
                "default",
                "customVhd"
              ]
            },
            "baseImage": {
              "description": "Base image",
              "enum": [
                "MicrosoftWindowsServer:WindowsServer:2012-R2-Datacenter:windows",
                "MicrosoftWindowsServer:WindowsServer:2016-Datacenter:windows",
                "MicrosoftWindowsServer:WindowsServer:2012-Datacenter:windows",
                "MicrosoftWindowsServer:WindowsServer:2008-R2-SP1:windows",
                "Canonical:UbuntuServer:14.04.4-LTS:linux",
                "Canonical:UbuntuServer:16.04-LTS:linux",
                "RedHat:RHEL:7.2:linux",
                "RedHat:RHEL:6.8:linux",
                "OpenLogic:CentOS:7.2:linux",
                "OpenLogic:CentOS:6.8:linux",
                "credativ:Debian:8:linux",
                "credativ:Debian:7:linux",
                "SUSE:openSUSE-Leap:42.2:linux",
                "SUSE:SLES:12-SP2:linux",
                "SUSE:SLES:11-SP4:linux"
              ]
            },
            "customImageUrl": {
              "description": "Base image URL",
              "type": "string"
            },
            "customImageOSType": {
              "description": "Base image OS",
              "enum": [
                "windows",
                "linux"
              ]
            },
            "packagePath": {
              "description": "Deployment Package",
              "type": "string"
            },
            "deployScriptPath": {
              "description": "Deployment script",
              "type": "string"
            },
            "deployScriptArguments": {
              "description": "Deployment script arguments",
              "type": "string"
            },
            "additionalBuilderParameters": {
              "description": "Additional Builder parameters",
              "type": "string"
            },
            "skipTempFileCleanupDuringVMDeprovision": {
              "description": "Skip temporary file cleanup during deprovision",
              "type": "boolean"
            },
            "imageUri": {
              "description": "Image URL",
              "type": "string"
            }
          },
          "description": "Build Machine Image inputs",
          "required": [
            "ConnectedServiceName",
            "location",
            "storageAccountName",
            "azureResourceGroup",
            "packagePath",
            "deployScriptPath"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[pP][oO][wW][eE][rR][sS][hH][eE][lL][lL]@2$",
          "description": "PowerShell\n\nRun a PowerShell script on Windows, macOS, or Linux."
        },
        "inputs": {
          "properties": {
            "targetType": {
              "description": "Type",
              "enum": [
                "filePath",
                "inline"
              ]
            },
            "filePath": {
              "description": "Script Path",
              "type": "string"
            },
            "arguments": {
              "description": "Arguments",
              "type": "string"
            },
            "script": {
              "description": "Script",
              "type": "string"
            },
            "errorActionPreference": {
              "description": "ErrorActionPreference",
              "enum": [
                "stop",
                "continue",
                "silentlyContinue"
              ]
            },
            "failOnStderr": {
              "description": "Fail on Standard Error",
              "type": "boolean"
            },
            "ignoreLASTEXITCODE": {
              "description": "Ignore $LASTEXITCODE",
              "type": "boolean"
            },
            "workingDirectory": {
              "description": "Working Directory",
              "type": "string"
            }
          },
          "description": "PowerShell inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[pP][oO][wW][eE][rR][sS][hH][eE][lL][lL][oO][nN][tT][aA][rR][gG][eE][tT][mM][aA][cC][hH][iI][nN][eE][sS]@2$",
          "description": "PowerShell on Target Machines\n\nExecute PowerShell scripts on remote machine(s)"
        },
        "inputs": {
          "properties": {
            "EnvironmentName": {
              "description": "Machines",
              "type": "string"
            },
            "AdminUserName": {
              "description": "Admin Login",
              "type": "string"
            },
            "AdminPassword": {
              "description": "Password",
              "type": "string"
            },
            "Protocol": {
              "description": "Protocol",
              "enum": [
                "Http",
                "Https"
              ]
            },
            "TestCertificate": {
              "description": "Test Certificate",
              "type": "boolean"
            },
            "ScriptPath": {
              "description": "PowerShell Script",
              "type": "string"
            },
            "ScriptArguments": {
              "description": "Script Arguments",
              "type": "string"
            },
            "InitializationScriptPath": {
              "description": "Initialization Script",
              "type": "string"
            },
            "SessionVariables": {
              "description": "Session Variables",
              "type": "string"
            },
            "RunPowershellInParallel": {
              "description": "Run PowerShell in Parallel",
              "type": "boolean"
            },
            "ResourceFilteringMethod": {
              "description": "Select Machines By",
              "enum": [
                "machineNames",
                "tags"
              ]
            },
            "MachineNames": {
              "description": "Filter Criteria",
              "type": "string"
            }
          },
          "description": "PowerShell on Target Machines inputs",
          "required": [
            "EnvironmentName",
            "ScriptPath"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[pP][oO][wW][eE][rR][sS][hH][eE][lL][lL][oO][nN][tT][aA][rR][gG][eE][tT][mM][aA][cC][hH][iI][nN][eE][sS]@3$",
          "description": "PowerShell on Target Machines\n\nExecute PowerShell scripts on remote machine(s). This version of the task uses PSSession and Invoke-Command for remoting."
        },
        "inputs": {
          "properties": {
            "Machines": {
              "description": "Machines",
              "type": "string"
            },
            "UserName": {
              "description": "Username",
              "type": "string"
            },
            "UserPassword": {
              "description": "Password",
              "type": "string"
            },
            "ScriptType": {
              "description": "Script Type",
              "enum": [
                "FilePath",
                "Inline"
              ]
            },
            "ScriptPath": {
              "description": "Script File Path",
              "type": "string"
            },
            "InlineScript": {
              "description": "Script",
              "type": "string"
            },
            "ScriptArguments": {
              "description": "Script Arguments",
              "type": "string"
            },
            "InitializationScript": {
              "description": "Initialization script",
              "type": "string"
            },
            "SessionVariables": {
              "description": "Session Variables",
              "type": "string"
            },
            "CommunicationProtocol": {
              "description": "Protocol",
              "enum": [
                "Http",
                "Https"
              ]
            },
            "AuthenticationMechanism": {
              "description": "Authentication",
              "enum": [
                "Default",
                "Credssp"
              ]
            },
            "NewPsSessionOptionArguments": {
              "description": "Session Option parameters",
              "type": "string"
            },
            "ErrorActionPreference": {
              "description": "ErrorActionPreference",
              "enum": [
                "stop",
                "continue",
                "silentlyContinue"
              ]
            },
            "failOnStderr": {
              "description": "Fail on Standard Error",
              "type": "boolean"
            },
            "ignoreLASTEXITCODE": {
              "description": "Ignore $LASTEXITCODE",
              "type": "boolean"
            },
            "WorkingDirectory": {
              "description": "Working Directory",
              "type": "string"
            },
            "RunPowershellInParallel": {
              "description": "Run PowerShell in Parallel",
              "type": "boolean"
            }
          },
          "description": "PowerShell on Target Machines inputs",
          "required": [
            "Machines"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[pP][uU][bB][lL][iI][sS][hH][bB][uU][iI][lL][dD][aA][rR][tT][iI][fF][aA][cC][tT][sS]@1$",
          "description": "Publish Build Artifacts\n\nPublish build artifacts to Visual Studio Team Services/TFS or a file share"
        },
        "inputs": {
          "properties": {
            "PathtoPublish": {
              "description": "Path to publish",
              "type": "string"
            },
            "ArtifactName": {
              "description": "Artifact name",
              "type": "string"
            },
            "ArtifactType": {
              "description": "Artifact publish location",
              "enum": [
                "Container",
                "FilePath"
              ]
            },
            "TargetPath": {
              "description": "File share path",
              "type": "string"
            },
            "Parallel": {
              "description": "Parallel copy",
              "type": "boolean"
            },
            "ParallelCount": {
              "description": "Parallel count"
            }
          },
          "description": "Publish Build Artifacts inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[pP][uU][bB][lL][iI][sS][hH][cC][oO][dD][eE][cC][oO][vV][eE][rR][aA][gG][eE][rR][eE][sS][uU][lL][tT][sS]@1$",
          "description": "Publish Code Coverage Results\n\nPublish Cobertura or JaCoCo code coverage results from a build"
        },
        "inputs": {
          "properties": {
            "codeCoverageTool": {
              "description": "Code coverage tool",
              "enum": [
                "Cobertura",
                "JaCoCo"
              ]
            },
            "summaryFileLocation": {
              "description": "Summary file",
              "type": "string"
            },
            "reportDirectory": {
              "description": "Report directory",
              "type": "string"
            },
            "additionalCodeCoverageFiles": {
              "description": "Additional files",
              "type": "string"
            },
            "failIfCoverageEmpty": {
              "description": "Fail when code coverage results are missing",
              "type": "boolean"
            }
          },
          "description": "Publish Code Coverage Results inputs",
          "required": [
            "summaryFileLocation"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[pP][uU][bB][lL][iI][sS][hH][sS][yY][mM][bB][oO][lL][sS]@2$",
          "description": "Index Sources & Publish Symbols\n\nIndex your source code and publish symbols to a file share or Visual Studio Team Services Symbol Server"
        },
        "inputs": {
          "properties": {
            "SymbolsFolder": {
              "description": "Path to symbols folder",
              "type": "string"
            },
            "SearchPattern": {
              "description": "Search pattern",
              "type": "string"
            },
            "IndexSources": {
              "description": "Index sources",
              "type": "boolean"
            },
            "PublishSymbols": {
              "description": "Publish symbols",
              "type": "boolean"
            },
            "SymbolServerType": {
              "description": "Symbol server type",
              "enum": [
                " ",
                "TeamServices",
                "FileShare"
              ]
            },
            "SymbolsPath": {
              "description": "Path to publish symbols",
              "type": "string"
            },
            "DetailedLog": {
              "description": "Verbose logging",
              "type": "boolean"
            },
            "TreatNotIndexedAsWarning": {
              "description": "Warn if not indexed",
              "type": "boolean"
            },
            "SymbolsMaximumWaitTime": {
              "description": "Max wait time (min)",
              "type": "string"
            },
            "SymbolsProduct": {
              "description": "Product",
              "type": "string"
            },
            "SymbolsVersion": {
              "description": "Version",
              "type": "string"
            },
            "SymbolsArtifactName": {
              "description": "Artifact name",
              "type": "string"
            }
          },
          "description": "Index Sources & Publish Symbols inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[pP][uU][bB][lL][iI][sS][hH][tT][eE][sS][tT][rR][eE][sS][uU][lL][tT][sS]@2$",
          "description": "Publish Test Results\n\nPublish Test Results to VSTS/TFS"
        },
        "inputs": {
          "properties": {
            "testRunner": {
              "description": "Test result format",
              "enum": [
                "JUnit",
                "NUnit",
                "VSTest",
                "XUnit"
              ]
            },
            "testResultsFiles": {
              "description": "Test results files",
              "type": "string"
            },
            "searchFolder": {
              "description": "Search folder",
              "type": "string"
            },
            "mergeTestResults": {
              "description": "Merge test results",
              "type": "boolean"
            },
            "testRunTitle": {
              "description": "Test run title",
              "type": "string"
            },
            "platform": {
              "description": "Platform",
              "type": "string"
            },
            "configuration": {
              "description": "Configuration",
              "type": "string"
            },
            "publishRunAttachments": {
              "description": "Upload test results files",
              "type": "boolean"
            }
          },
          "description": "Publish Test Results inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[pP][uU][bB][lL][iI][sS][hH][tT][oO][aA][zZ][uU][rR][eE][sS][eE][rR][vV][iI][cC][eE][bB][uU][sS]@1$",
          "description": "Publish To Azure Service Bus\n\nSends a message to azure service bus using a service connection (no agent required)."
        },
        "inputs": {
          "properties": {
            "connectedServiceName": {
              "description": "Azure Service Bus service connection",
              "type": "string"
            },
            "messageBody": {
              "description": "Message body",
              "type": "string"
            },
            "signPayload": {
              "description": "Sign the Message",
              "type": "boolean"
            },
            "certificateString": {
              "description": "Certificate Variable",
              "type": "string"
            },
            "signatureKey": {
              "description": "Signature Property Key",
              "type": "string"
            },
            "waitForCompletion": {
              "description": "Wait for task completion",
              "type": "boolean"
            }
          },
          "description": "Publish To Azure Service Bus inputs",
          "required": [
            "connectedServiceName"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[pP][yY][pP][iI][pP][uU][bB][lL][iI][sS][hH][eE][rR]@0$",
          "description": "PyPI Publisher\n\nCreate and upload an sdist or wheel to a PyPI-compatible index using Twine."
        },
        "inputs": {
          "properties": {
            "serviceEndpoint": {
              "description": "PyPI service connection",
              "type": "string"
            },
            "wd": {
              "description": "Python package directory",
              "type": "string"
            },
            "wheel": {
              "description": "Also publish a wheel",
              "type": "boolean"
            }
          },
          "description": "PyPI Publisher inputs",
          "required": [
            "serviceEndpoint",
            "wd"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[pP][yY][tT][hH][oO][nN][sS][cC][rR][iI][pP][tT]@0$",
          "description": "Python Script\n\nRun a Python script."
        },
        "inputs": {
          "properties": {
            "scriptSource": {
              "description": "Script source",
              "enum": [
                "filePath",
                "inline"
              ]
            },
            "scriptPath": {
              "description": "Script path",
              "type": "string"
            },
            "script": {
              "description": "Script",
              "type": "string"
            },
            "arguments": {
              "description": "Arguments",
              "type": "string"
            },
            "pythonInterpreter": {
              "description": "Python interpreter",
              "type": "string"
            },
            "workingDirectory": {
              "description": "Working directory",
              "type": "string"
            },
            "failOnStderr": {
              "description": "Fail on standard error",
              "type": "boolean"
            }
          },
          "description": "Python Script inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[qQ][uU][eE][rR][yY][wW][oO][rR][kK][iI][tT][eE][mM][sS]@0$",
          "description": "Query Work Items\n\nExecutes a work item query and checks for the number of items returned."
        },
        "inputs": {
          "properties": {
            "queryId": {
              "description": "Query"
            },
            "maxThreshold": {
              "description": "Upper threshold",
              "type": "string"
            },
            "minThreshold": {
              "description": "Lower threshold",
              "type": "string"
            }
          },
          "description": "Query Work Items inputs",
          "required": [
            "queryId"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[qQ][uU][iI][cC][kK][pP][eE][rR][fF][tT][eE][sS][tT]@1$",
          "description": "Cloud-based Web Performance Test\n\nRuns a quick web performance test in the cloud with Visual Studio Team Services"
        },
        "inputs": {
          "properties": {
            "connectedServiceName": {
              "description": "VS Team Services Connection",
              "type": "string"
            },
            "websiteUrl": {
              "description": "Website URL",
              "type": "string"
            },
            "testName": {
              "description": "Test Name",
              "type": "string"
            },
            "vuLoad": {
              "description": "User Load",
              "enum": [
                "25",
                "50",
                "100",
                "250"
              ]
            },
            "runDuration": {
              "description": "Run Duration (sec)",
              "enum": [
                "60",
                "120",
                "180",
                "240",
                "300"
              ]
            },
            "geoLocation": {
              "description": "Load Location",
              "enum": [
                "Default",
                "Australia East",
                "Australia Southeast",
                "Brazil South",
                "Central India",
                "Central US",
                "East Asia",
                "East US 2",
                "East US",
                "Japan East",
                "Japan West",
                "North Central US",
                "North Europe",
                "South Central US",
                "South India",
                "Southeast Asia",
                "West Europe",
                "West US"
              ]
            },
            "machineType": {
              "description": "Run load test using",
              "enum": [
                "0",
                "2"
              ]
            },
            "resourceGroupName": {
              "description": "Resource group rig",
              "type": "string"
            },
            "numOfSelfProvisionedAgents": {
              "description": "No. of agents to use"
            },
            "avgResponseTimeThreshold": {
              "description": "Fail test if Avg.Response Time(ms) exceeds",
              "type": "string"
            }
          },
          "description": "Cloud-based Web Performance Test inputs",
          "required": [
            "websiteUrl",
            "testName"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[rR][uU][nN][vV][iI][sS][uU][aA][lL][sS][tT][uU][dD][iI][oO][tT][eE][sS][tT][sS][uU][sS][iI][nN][gG][tT][eE][sS][tT][aA][gG][eE][nN][tT]@1$",
          "description": "Run Functional Tests\n\nDeprecated: This task and it’s companion task (Visual Studio Test Agent Deployment) are deprecated. Use the 'Visual Studio Test' task instead. The VSTest task can run unit as well as functional tests. Run tests on one or more agents using the multi-agent phase setting. Use the 'Visual Studio Test Platform' task to run tests without needing Visual Studio on the agent. VSTest task also brings new capabilities such as automatically rerunning failed tests."
        },
        "inputs": {
          "properties": {
            "testMachineGroup": {
              "description": "Machines",
              "type": "string"
            },
            "dropLocation": {
              "description": "Test Drop Location",
              "type": "string"
            },
            "testSelection": {
              "description": "Test Selection",
              "enum": [
                "testAssembly",
                "testPlan"
              ]
            },
            "testPlan": {
              "description": "Test Plan",
              "type": "string"
            },
            "testSuite": {
              "description": "Test Suite",
              "type": "string"
            },
            "testConfiguration": {
              "description": "Test Configuration",
              "type": "string"
            },
            "sourcefilters": {
              "description": "Test Assembly",
              "type": "string"
            },
            "testFilterCriteria": {
              "description": "Test Filter criteria",
              "type": "string"
            },
            "runSettingsFile": {
              "description": "Run Settings File",
              "type": "string"
            },
            "overrideRunParams": {
              "description": "Override Test Run Parameters",
              "type": "string"
            },
            "codeCoverageEnabled": {
              "description": "Code Coverage Enabled",
              "type": "boolean"
            },
            "customSlicingEnabled": {
              "description": "Distribute tests by number of machines",
              "type": "boolean"
            },
            "testRunTitle": {
              "description": "Test Run Title",
              "type": "string"
            },
            "platform": {
              "description": "Platform",
              "type": "string"
            },
            "configuration": {
              "description": "Configuration",
              "type": "string"
            },
            "testConfigurations": {
              "description": "Test Configurations",
              "type": "string"
            },
            "autMachineGroup": {
              "description": "Application Under Test Machines",
              "type": "string"
            }
          },
          "description": "Run Functional Tests inputs",
          "required": [
            "testMachineGroup",
            "dropLocation"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[aA][pP][aA][cC][hH][eE][jJ][mM][eE][tT][eE][rR][lL][oO][aA][dD][tT][eE][sS][tT]@1$",
          "description": "Cloud-based Apache JMeter Load Test\n\nRuns the Apache JMeter load test in cloud"
        },
        "inputs": {
          "properties": {
            "connectedServiceName": {
              "description": "VS Team Services Connection",
              "type": "string"
            },
            "TestDrop": {
              "description": "Apache JMeter test files folder",
              "type": "string"
            },
            "LoadTest": {
              "description": "Apache JMeter file",
              "type": "string"
            },
            "agentCount": {
              "description": "Agent Count",
              "enum": [
                "1",
                "2",
                "3",
                "4",
                "5"
              ]
            },
            "runDuration": {
              "description": "Run Duration (sec)",
              "enum": [
                "60",
                "120",
                "180",
                "240",
                "300"
              ]
            },
            "geoLocation": {
              "description": "Load Location",
              "enum": [
                "Default",
                "Australia East",
                "Australia Southeast",
                "Brazil South",
                "Central India",
                "Central US",
                "East Asia",
                "East US 2",
                "East US",
                "Japan East",
                "Japan West",
                "North Central US",
                "North Europe",
                "South Central US",
                "South India",
                "Southeast Asia",
                "West Europe",
                "West US"
              ]
            },
            "machineType": {
              "description": "Run load test using",
              "enum": [
                "0",
                "2"
              ]
            }
          },
          "description": "Cloud-based Apache JMeter Load Test inputs",
          "required": [
            "TestDrop"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[cC][lL][oO][uU][dD][lL][oO][aA][dD][tT][eE][sS][tT]@1$",
          "description": "Cloud-based Load Test\n\nRuns the load test in the cloud with Visual Studio Team Services"
        },
        "inputs": {
          "properties": {
            "connectedServiceName": {
              "description": "VS Team Services Connection",
              "type": "string"
            },
            "TestDrop": {
              "description": "Load test files folder",
              "type": "string"
            },
            "LoadTest": {
              "description": "Load test file",
              "type": "string"
            },
            "activeRunSettings": {
              "description": "Active Run Settings",
              "enum": [
                "useFile",
                "changeActive"
              ]
            },
            "runSettingName": {
              "description": "Specify the name of the Run Settings",
              "type": "string"
            },
            "testContextParameters": {
              "description": "Override load test context parameters"
            },
            "TestSettings": {
              "description": "Test settings file",
              "type": "string"
            },
            "ThresholdLimit": {
              "description": "Number of permissible threshold violations",
              "type": "string"
            },
            "MachineType": {
              "description": "Run load test using",
              "enum": [
                "0",
                "2"
              ]
            },
            "resourceGroupName": {
              "description": "Resource group rig",
              "type": "string"
            },
            "numOfSelfProvisionedAgents": {
              "description": "Number of agents to use"
            }
          },
          "description": "Cloud-based Load Test inputs",
          "required": [
            "LoadTest"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[sS][eE][rR][vV][iI][cC][eE][fF][aA][bB][rR][iI][cC][cC][oO][mM][pP][oO][sS][eE][dD][eE][pP][lL][oO][yY]@0$",
          "description": "Service Fabric Compose Deploy\n\nDeploy a docker-compose application to a Service Fabric cluster."
        },
        "inputs": {
          "properties": {
            "serviceConnectionName": {
              "description": "Cluster Service Connection",
              "type": "string"
            },
            "composeFilePath": {
              "description": "Compose File Path",
              "type": "string"
            },
            "applicationName": {
              "description": "Application Name",
              "type": "string"
            },
            "registryCredentials": {
              "description": "Registry Credentials Source",
              "enum": [
                "AzureResourceManagerEndpoint",
                "ContainerRegistryEndpoint",
                "UsernamePassword",
                "None"
              ]
            },
            "dockerRegistryEndpointName": {
              "description": "Docker Registry Service Connection",
              "type": "string"
            },
            "azureSubscriptionEndpoint": {
              "description": "Azure subscription",
              "type": "string"
            },
            "registryUserName": {
              "description": "Registry User Name",
              "type": "string"
            },
            "registryPassword": {
              "description": "Registry Password",
              "type": "string"
            },
            "passwordEncrypted": {
              "description": "Password Encrypted",
              "type": "boolean"
            },
            "upgrade": {
              "description": "Upgrade",
              "type": "boolean"
            },
            "deployTimeoutSec": {
              "description": "Deploy Timeout (s)",
              "type": "string"
            },
            "removeTimeoutSec": {
              "description": "Remove Timeout (s)",
              "type": "string"
            },
            "getStatusTimeoutSec": {
              "description": "Get Status Timeout (s)",
              "type": "string"
            }
          },
          "description": "Service Fabric Compose Deploy inputs",
          "required": [
            "serviceConnectionName"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[sS][eE][rR][vV][iI][cC][eE][fF][aA][bB][rR][iI][cC][dD][eE][pP][lL][oO][yY]@1$",
          "description": "Service Fabric Application Deployment\n\nDeploy a Service Fabric application to a cluster."
        },
        "inputs": {
          "properties": {
            "applicationPackagePath": {
              "description": "Application Package",
              "type": "string"
            },
            "serviceConnectionName": {
              "description": "Cluster Service Connection",
              "type": "string"
            },
            "publishProfilePath": {
              "description": "Publish Profile",
              "type": "string"
            },
            "applicationParameterPath": {
              "description": "Application Parameters",
              "type": "string"
            },
            "overrideApplicationParameter": {
              "description": "Override Application Parameters",
              "type": "boolean"
            },
            "compressPackage": {
              "description": "Compress Package",
              "type": "boolean"
            },
            "copyPackageTimeoutSec": {
              "description": "CopyPackageTimeoutSec",
              "type": "string"
            },
            "registerPackageTimeoutSec": {
              "description": "RegisterPackageTimeoutSec",
              "type": "string"
            },
            "overwriteBehavior": {
              "description": "Overwrite Behavior",
              "enum": [
                "Always",
                "Never",
                "SameAppTypeAndVersion"
              ]
            },
            "skipUpgradeSameTypeAndVersion": {
              "description": "Skip upgrade for same Type and Version",
              "type": "boolean"
            },
            "skipPackageValidation": {
              "description": "Skip package validation",
              "type": "boolean"
            },
            "useDiffPackage": {
              "description": "Use Diff Package",
              "type": "boolean"
            },
            "overridePublishProfileSettings": {
              "description": "Override All Publish Profile Upgrade Settings",
              "type": "boolean"
            },
            "isUpgrade": {
              "description": "Upgrade the Application",
              "type": "boolean"
            },
            "unregisterUnusedVersions": {
              "description": "Unregister Unused Versions",
              "type": "boolean"
            },
            "upgradeMode": {
              "description": "Upgrade Mode",
              "enum": [
                "Monitored",
                "UnmonitoredAuto",
                "UnmonitoredManual"
              ]
            },
            "FailureAction": {
              "description": "FailureAction",
              "enum": [
                "Rollback",
                "Manual"
              ]
            },
            "UpgradeReplicaSetCheckTimeoutSec": {
              "description": "UpgradeReplicaSetCheckTimeoutSec",
              "type": "string"
            },
            "ReplicaQuorumTimeoutSec": {
              "description": "ReplicaQuorumTimeoutSec",
              "type": "string"
            },
            "TimeoutSec": {
              "description": "TimeoutSec",
              "type": "string"
            },
            "ForceRestart": {
              "description": "ForceRestart",
              "type": "boolean"
            },
            "HealthCheckRetryTimeoutSec": {
              "description": "HealthCheckRetryTimeoutSec",
              "type": "string"
            },
            "HealthCheckWaitDurationSec": {
              "description": "HealthCheckWaitDurationSec",
              "type": "string"
            },
            "HealthCheckStableDurationSec": {
              "description": "HealthCheckStableDurationSec",
              "type": "string"
            },
            "UpgradeDomainTimeoutSec": {
              "description": "UpgradeDomainTimeoutSec",
              "type": "string"
            },
            "ConsiderWarningAsError": {
              "description": "ConsiderWarningAsError",
              "type": "boolean"
            },
            "DefaultServiceTypeHealthPolicy": {
              "description": "DefaultServiceTypeHealthPolicy",
              "type": "string"
            },
            "MaxPercentUnhealthyDeployedApplications": {
              "description": "MaxPercentUnhealthyDeployedApplications",
              "type": "string"
            },
            "UpgradeTimeoutSec": {
              "description": "UpgradeTimeoutSec",
              "type": "string"
            },
            "ServiceTypeHealthPolicyMap": {
              "description": "ServiceTypeHealthPolicyMap",
              "type": "string"
            },
            "configureDockerSettings": {
              "description": "Configure Docker settings",
              "type": "boolean"
            },
            "registryCredentials": {
              "description": "Registry Credentials Source",
              "enum": [
                "AzureResourceManagerEndpoint",
                "ContainerRegistryEndpoint",
                "UsernamePassword"
              ]
            },
            "dockerRegistryEndpoint": {
              "description": "Docker Registry Service Connection",
              "type": "string"
            },
            "azureSubscriptionEndpoint": {
              "description": "Azure subscription",
              "type": "string"
            },
            "registryUserName": {
              "description": "Registry User Name",
              "type": "string"
            },
            "registryPassword": {
              "description": "Registry Password",
              "type": "string"
            },
            "passwordEncrypted": {
              "description": "Password Encrypted",
              "type": "boolean"
            }
          },
          "description": "Service Fabric Application Deployment inputs",
          "required": [
            "applicationPackagePath",
            "serviceConnectionName"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[sS][eE][rR][vV][iI][cC][eE][fF][aA][bB][rR][iI][cC][pP][oO][wW][eE][rR][sS][hH][eE][lL][lL]@1$",
          "description": "Service Fabric PowerShell\n\nRun a PowerShell script within the context of an Azure Service Fabric cluster connection."
        },
        "inputs": {
          "properties": {
            "serviceConnectionName": {
              "description": "Cluster Service Connection",
              "type": "string"
            },
            "ScriptType": {
              "description": "Script Type",
              "enum": [
                "FilePath",
                "InlineScript"
              ]
            },
            "ScriptPath": {
              "description": "Script Path",
              "type": "string"
            },
            "Inline": {
              "description": "Inline Script",
              "type": "string"
            },
            "ScriptArguments": {
              "description": "Script Arguments",
              "type": "string"
            }
          },
          "description": "Service Fabric PowerShell inputs",
          "required": [
            "serviceConnectionName"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[sS][eE][rR][vV][iI][cC][eE][fF][aA][bB][rR][iI][cC][uU][pP][dD][aA][tT][eE][mM][aA][nN][iI][fF][eE][sS][tT][sS]@2$",
          "description": "Update Service Fabric Manifests\n\nAutomatically updates portions of the application and service manifests within a packaged Service Fabric application."
        },
        "inputs": {
          "properties": {
            "updateType": {
              "description": "Update Type",
              "enum": [
                "Manifest versions",
                "Docker image settings"
              ]
            },
            "applicationPackagePath": {
              "description": "Application Package",
              "type": "string"
            },
            "versionSuffix": {
              "description": "Version Value",
              "type": "string"
            },
            "versionBehavior": {
              "description": "Version Behavior",
              "enum": [
                "Append",
                "Replace"
              ]
            },
            "updateOnlyChanged": {
              "description": "Update only if changed",
              "type": "boolean"
            },
            "pkgArtifactName": {
              "description": "Package Artifact Name",
              "type": "string"
            },
            "logAllChanges": {
              "description": "Log all changes",
              "type": "boolean"
            },
            "compareType": {
              "description": "Compare against",
              "enum": [
                "LastSuccessful",
                "Specific"
              ]
            },
            "buildNumber": {
              "description": "Build Number",
              "type": "string"
            },
            "overwriteExistingPkgArtifact": {
              "description": "Overwrite Existing Package Artifact",
              "type": "boolean"
            },
            "imageNamesPath": {
              "description": "Image Names Path",
              "type": "string"
            },
            "imageDigestsPath": {
              "description": "Image Digests Path",
              "type": "string"
            }
          },
          "description": "Update Service Fabric Manifests inputs",
          "required": [
            "applicationPackagePath"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[sS][qQ][lL][aA][zZ][uU][rR][eE][dD][aA][cC][pP][aA][cC][dD][eE][pP][lL][oO][yY][mM][eE][nN][tT]@1$",
          "description": "Azure SQL Database Deployment\n\nDeploy Azure SQL DB using DACPAC or run scripts using SQLCMD"
        },
        "inputs": {
          "properties": {
            "ConnectedServiceNameSelector": {
              "description": "Azure Service Connection Type",
              "enum": [
                "ConnectedServiceName",
                "ConnectedServiceNameARM"
              ]
            },
            "ConnectedServiceName": {
              "description": "Azure Classic Subscription",
              "type": "string"
            },
            "ConnectedServiceNameARM": {
              "description": "Azure Subscription",
              "type": "string"
            },
            "ServerName": {
              "description": "Azure SQL Server Name",
              "type": "string"
            },
            "DatabaseName": {
              "description": "Database Name",
              "type": "string"
            },
            "SqlUsername": {
              "description": "Server Admin Login",
              "type": "string"
            },
            "SqlPassword": {
              "description": "Password",
              "type": "string"
            },
            "DeploymentAction": {
              "description": "Action"
            },
            "TaskNameSelector": {
              "description": "Type",
              "enum": [
                "DacpacTask",
                "SqlTask",
                "InlineSqlTask"
              ]
            },
            "DacpacFile": {
              "description": "DACPAC File",
              "type": "string"
            },
            "BacpacFile": {
              "description": "BACPAC File",
              "type": "string"
            },
            "SqlFile": {
              "description": "SQL Script",
              "type": "string"
            },
            "SqlInline": {
              "description": "Inline SQL Script",
              "type": "string"
            },
            "PublishProfile": {
              "description": "Publish Profile",
              "type": "string"
            },
            "AdditionalArguments": {
              "description": "Additional SqlPackage.exe Arguments",
              "type": "string"
            },
            "SqlAdditionalArguments": {
              "description": "Additional Invoke-Sqlcmd Arguments",
              "type": "string"
            },
            "InlineAdditionalArguments": {
              "description": "Additional Invoke-Sqlcmd Arguments",
              "type": "string"
            },
            "IpDetectionMethod": {
              "description": "Specify Firewall Rules Using",
              "enum": [
                "AutoDetect",
                "IPAddressRange"
              ]
            },
            "StartIpAddress": {
              "description": "Start IP Address",
              "type": "string"
            },
            "EndIpAddress": {
              "description": "End IP Address",
              "type": "string"
            },
            "DeleteFirewallRule": {
              "description": "Delete Rule After Task Ends",
              "type": "boolean"
            }
          },
          "description": "Azure SQL Database Deployment inputs",
          "required": [
            "ServerName",
            "DatabaseName"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[sS][qQ][lL][dD][aA][cC][pP][aA][cC][dD][eE][pP][lL][oO][yY][mM][eE][nN][tT][oO][nN][mM][aA][cC][hH][iI][nN][eE][gG][rR][oO][uU][pP]@0$",
          "description": "SQL Server Database Deploy\n\nDeploy to SQL Server Database using DACPAC or SQL scripts"
        },
        "inputs": {
          "properties": {
            "TaskType": {
              "description": "Deploy SQL Using",
              "enum": [
                "dacpac",
                "sqlQuery",
                "sqlInline"
              ]
            },
            "DacpacFile": {
              "description": "DACPAC File",
              "type": "string"
            },
            "SqlFile": {
              "description": "Sql File",
              "type": "string"
            },
            "ExecuteInTransaction": {
              "description": "Execute within a transaction",
              "type": "boolean"
            },
            "ExclusiveLock": {
              "description": "Acquire an exclusive app lock while executing script(s)",
              "type": "boolean"
            },
            "AppLockName": {
              "description": "App lock name",
              "type": "string"
            },
            "InlineSql": {
              "description": "Inline Sql",
              "type": "string"
            },
            "TargetMethod": {
              "description": "Specify SQL Using",
              "enum": [
                "server",
                "connectionString",
                "publishProfile"
              ]
            },
            "ServerName": {
              "description": "Server Name",
              "type": "string"
            },
            "DatabaseName": {
              "description": "Database Name",
              "type": "string"
            },
            "AuthScheme": {
              "description": "Authentication",
              "enum": [
                "windowsAuthentication",
                "sqlServerAuthentication"
              ]
            },
            "SqlUsername": {
              "description": "SQL User name",
              "type": "string"
            },
            "SqlPassword": {
              "description": "SQL Password",
              "type": "string"
            },
            "ConnectionString": {
              "description": "Connection String",
              "type": "string"
            },
            "PublishProfile": {
              "description": "Publish Profile",
              "type": "string"
            },
            "AdditionalArguments": {
              "description": "Additional Arguments",
              "type": "string"
            },
            "AdditionalArgumentsSql": {
              "description": "Additional Arguments",
              "type": "string"
            }
          },
          "description": "SQL Server Database Deploy inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[sS][sS][hH]@0$",
          "description": "SSH\n\nRun shell commands or a script on a remote machine using SSH"
        },
        "inputs": {
          "properties": {
            "sshEndpoint": {
              "description": "SSH service connection",
              "type": "string"
            },
            "runOptions": {
              "description": "Run",
              "enum": [
                "commands",
                "script",
                "inline"
              ]
            },
            "commands": {
              "description": "Commands",
              "type": "string"
            },
            "scriptPath": {
              "description": "Shell script path",
              "type": "string"
            },
            "inline": {
              "description": "Inline Script",
              "type": "string"
            },
            "args": {
              "description": "Arguments",
              "type": "string"
            },
            "failOnStdErr": {
              "description": "Fail on STDERR",
              "type": "boolean"
            }
          },
          "description": "SSH inputs",
          "required": [
            "sshEndpoint"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[uU][sS][eE][pP][yY][tT][hH][oO][nN][vV][eE][rR][sS][iI][oO][nN]@0$",
          "description": "Use Python Version\n\nRetrieves the specified version of Python from the tool cache. Optionally add it to PATH."
        },
        "inputs": {
          "properties": {
            "versionSpec": {
              "description": "Version spec",
              "type": "string"
            },
            "addToPath": {
              "description": "Add to PATH",
              "type": "boolean"
            },
            "architecture": {
              "description": "Architecture",
              "enum": [
                "x86",
                "x64"
              ]
            }
          },
          "description": "Use Python Version inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[uU][sS][eE][rR][uU][bB][yY][vV][eE][rR][sS][iI][oO][nN]@0$",
          "description": "Use Ruby Version\n\nRetrieves the specified version of Ruby from the tool cache. Optionally add it to PATH."
        },
        "inputs": {
          "properties": {
            "versionSpec": {
              "description": "Version spec",
              "type": "string"
            },
            "addToPath": {
              "description": "Add to PATH",
              "type": "boolean"
            }
          },
          "description": "Use Ruby Version inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[vV][sS][bB][uU][iI][lL][dD]@1$",
          "description": "Visual Studio Build\n\nBuild with MSBuild and set the Visual Studio version property."
        },
        "inputs": {
          "properties": {
            "solution": {
              "description": "Solution",
              "type": "string"
            },
            "vsVersion": {
              "description": "Visual Studio Version",
              "enum": [
                "latest",
                "15.0",
                "14.0",
                "12.0",
                "11.0"
              ]
            },
            "msbuildArgs": {
              "description": "MSBuild Arguments",
              "type": "string"
            },
            "platform": {
              "description": "Platform",
              "type": "string"
            },
            "configuration": {
              "description": "Configuration",
              "type": "string"
            },
            "clean": {
              "description": "Clean",
              "type": "boolean"
            },
            "maximumCpuCount": {
              "description": "Build in Parallel",
              "type": "boolean"
            },
            "restoreNugetPackages": {
              "description": "Restore NuGet Packages",
              "type": "boolean"
            },
            "msbuildArchitecture": {
              "description": "MSBuild Architecture",
              "enum": [
                "x86",
                "x64"
              ]
            },
            "logProjectEvents": {
              "description": "Record Project Details",
              "type": "boolean"
            },
            "createLogFile": {
              "description": "Create Log File",
              "type": "boolean"
            }
          },
          "description": "Visual Studio Build inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[vV][sS][tT][eE][sS][tT]@2$",
          "description": "Visual Studio Test\n\nRun unit and functional tests (Selenium, Appium, Coded UI test, etc.) using the Visual Studio Test (VsTest) runner. Test frameworks that have a Visual Studio test adapter such as MsTest, xUnit, NUnit, Chutzpah (for JavaScript tests using QUnit, Mocha and Jasmine), etc. can be run. Tests can be distributed on multiple agents using this task (version 2)."
        },
        "inputs": {
          "properties": {
            "testSelector": {
              "description": "Select tests using",
              "enum": [
                "testAssemblies",
                "testPlan",
                "testRun"
              ]
            },
            "testAssemblyVer2": {
              "description": "Test files",
              "type": "string"
            },
            "testPlan": {
              "description": "Test plan",
              "type": "string"
            },
            "testSuite": {
              "description": "Test suite",
              "type": "string"
            },
            "testConfiguration": {
              "description": "Test configuration",
              "type": "string"
            },
            "tcmTestRun": {
              "description": "Test Run",
              "type": "string"
            },
            "searchFolder": {
              "description": "Search folder",
              "type": "string"
            },
            "testFiltercriteria": {
              "description": "Test filter criteria",
              "type": "string"
            },
            "runOnlyImpactedTests": {
              "description": "Run only impacted tests",
              "type": "boolean"
            },
            "runAllTestsAfterXBuilds": {
              "description": "Number of builds after which all tests should be run",
              "type": "string"
            },
            "uiTests": {
              "description": "Test mix contains UI tests",
              "type": "boolean"
            },
            "vstestLocationMethod": {
              "description": "Select test platform using",
              "enum": [
                "version",
                "location"
              ]
            },
            "vsTestVersion": {
              "description": "Test platform version",
              "enum": [
                "latest",
                "15.0",
                "14.0",
                "toolsInstaller"
              ]
            },
            "vstestLocation": {
              "description": "Path to vstest.console.exe",
              "type": "string"
            },
            "runSettingsFile": {
              "description": "Settings file",
              "type": "string"
            },
            "overrideTestrunParameters": {
              "description": "Override test run parameters",
              "type": "string"
            },
            "pathtoCustomTestAdapters": {
              "description": "Path to custom test adapters",
              "type": "string"
            },
            "runInParallel": {
              "description": "Run tests in parallel on multi-core machines",
              "type": "boolean"
            },
            "runTestsInIsolation": {
              "description": "Run tests in isolation",
              "type": "boolean"
            },
            "codeCoverageEnabled": {
              "description": "Code coverage enabled",
              "type": "boolean"
            },
            "otherConsoleOptions": {
              "description": "Other console options",
              "type": "string"
            },
            "distributionBatchType": {
              "description": "Batch tests",
              "enum": [
                "basedOnTestCases",
                "basedOnExecutionTime",
                "basedOnAssembly"
              ]
            },
            "batchingBasedOnAgentsOption": {
              "description": "Batch options",
              "enum": [
                "autoBatchSize",
                "customBatchSize"
              ]
            },
            "customBatchSizeValue": {
              "description": "Number of tests per batch",
              "type": "string"
            },
            "batchingBasedOnExecutionTimeOption": {
              "description": "Batch options",
              "enum": [
                "autoBatchSize",
                "customTimeBatchSize"
              ]
            },
            "customRunTimePerBatchValue": {
              "description": "Running time (sec) per batch",
              "type": "string"
            },
            "dontDistribute": {
              "description": "Do not distribute tests and replicate instead when multiple agents are used in the phase",
              "type": "boolean"
            },
            "testRunTitle": {
              "description": "Test run title",
              "type": "string"
            },
            "platform": {
              "description": "Build platform",
              "type": "string"
            },
            "configuration": {
              "description": "Build configuration",
              "type": "string"
            },
            "publishRunAttachments": {
              "description": "Upload test attachments",
              "type": "boolean"
            },
            "rerunFailedTests": {
              "description": "Rerun failed tests",
              "type": "boolean"
            },
            "rerunType": {
              "description": "Do not rerun if test failures exceed specified threshold",
              "enum": [
                "basedOnTestFailurePercentage",
                "basedOnTestFailureCount"
              ]
            },
            "rerunFailedThreshold": {
              "description": "% failure",
              "type": "string"
            },
            "rerunFailedTestCasesMaxLimit": {
              "description": "# of failed tests",
              "type": "string"
            },
            "rerunMaxAttempts": {
              "description": "Maximum # of attempts",
              "type": "string"
            }
          },
          "description": "Visual Studio Test inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[vV][iI][sS][uU][aA][lL][sS][tT][uU][dD][iI][oO][tT][eE][sS][tT][pP][lL][aA][tT][fF][oO][rR][mM][iI][nN][sS][tT][aA][lL][lL][eE][rR]@1$",
          "description": "Visual Studio Test Platform Installer\n\nAcquires the test platform from nuget.org or the tools cache. Satisfies the ‘vstest’ demand and can be used for running tests and collecting diagnostic data using the Visual Studio Test task."
        },
        "inputs": {
          "properties": {
            "packageFeedSelector": {
              "description": "Package Feed",
              "enum": [
                "nugetOrg",
                "customFeed",
                "netShare"
              ]
            },
            "versionSelector": {
              "description": "Version",
              "enum": [
                "latestPreRelease",
                "latestStable",
                "specificVersion"
              ]
            },
            "testPlatformVersion": {
              "description": "Test Platform Version",
              "type": "string"
            },
            "customFeed": {
              "description": "Package Source",
              "type": "string"
            },
            "username": {
              "description": "User Name",
              "type": "string"
            },
            "password": {
              "description": "Password",
              "type": "string"
            },
            "netShare": {
              "description": "UNC Path",
              "type": "string"
            }
          },
          "description": "Visual Studio Test Platform Installer inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[wW][iI][nN][dD][oO][wW][sS][mM][aA][cC][hH][iI][nN][eE][fF][iI][lL][eE][cC][oO][pP][yY]@2$",
          "description": "Windows Machine File Copy\n\nCopy files to remote machine(s)"
        },
        "inputs": {
          "properties": {
            "SourcePath": {
              "description": "Source",
              "type": "string"
            },
            "MachineNames": {
              "description": "Machines",
              "type": "string"
            },
            "AdminUserName": {
              "description": "Admin Login",
              "type": "string"
            },
            "AdminPassword": {
              "description": "Password",
              "type": "string"
            },
            "TargetPath": {
              "description": "Destination Folder",
              "type": "string"
            },
            "CleanTargetBeforeCopy": {
              "description": "Clean Target",
              "type": "boolean"
            },
            "CopyFilesInParallel": {
              "description": "Copy Files in Parallel",
              "type": "boolean"
            },
            "AdditionalArguments": {
              "description": "Additional Arguments",
              "type": "string"
            }
          },
          "description": "Windows Machine File Copy inputs",
          "required": [
            "SourcePath",
            "TargetPath"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[xX][aA][mM][aA][rR][iI][nN][aA][nN][dD][rR][oO][iI][dD]@1$",
          "description": "Xamarin.Android\n\nBuild an Android app with Xamarin"
        },
        "inputs": {
          "properties": {
            "project": {
              "description": "Project",
              "type": "string"
            },
            "target": {
              "description": "Target",
              "type": "string"
            },
            "outputDir": {
              "description": "Output directory",
              "type": "string"
            },
            "configuration": {
              "description": "Configuration",
              "type": "string"
            },
            "createAppPackage": {
              "description": "Create app package",
              "type": "boolean"
            },
            "clean": {
              "description": "Clean",
              "type": "boolean"
            },
            "msbuildLocationMethod": {
              "description": "MSBuild",
              "enum": [
                "version",
                "location"
              ]
            },
            "msbuildVersion": {
              "description": "MSBuild version",
              "enum": [
                "latest",
                "15.0",
                "14.0",
                "12.0",
                "4.0"
              ]
            },
            "msbuildLocation": {
              "description": "MSBuild location",
              "type": "string"
            },
            "msbuildArchitecture": {
              "description": "MSBuild architecture",
              "enum": [
                "x86",
                "x64"
              ]
            },
            "msbuildArguments": {
              "description": "Additional arguments",
              "type": "string"
            },
            "jdkSelection": {
              "description": "Select JDK to use for the build",
              "enum": [
                "JDKVersion",
                "Path"
              ]
            },
            "jdkVersion": {
              "description": "JDK version",
              "enum": [
                "default",
                "1.10",
                "1.9",
                "1.8",
                "1.7",
                "1.6"
              ]
            },
            "jdkUserInputPath": {
              "description": "JDK path",
              "type": "string"
            },
            "jdkArchitecture": {
              "description": "JDK architecture",
              "enum": [
                "x86",
                "x64"
              ]
            }
          },
          "description": "Xamarin.Android inputs"
        }
      }
    },
    {
      "properties": {
        "task": {
          "pattern": "^[xX][aA][mM][aA][rR][iI][nN][cC][oO][mM][pP][oO][nN][eE][nN][tT][rR][eE][sS][tT][oO][rR][eE]@0$",
          "description": "Xamarin Component Restore\n\nThis task is deprecated. Use 'NuGet' instead."
        },
        "inputs": {
          "properties": {
            "solution": {
              "description": "Path to solution",
              "type": "string"
            },
            "email": {
              "description": "Email",
              "type": "string"
            },
            "password": {
              "description": "Password",
              "type": "string"
            }
          },
          "description": "Xamarin Component Restore inputs",
          "required": [
            "email",
            "password"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[xX][aA][mM][aA][rR][iI][nN][iI][oO][sS]@2$",
          "description": "Xamarin.iOS\n\nBuild an iOS app with Xamarin on macOS."
        },
        "inputs": {
          "properties": {
            "solution": {
              "description": "Solution",
              "type": "string"
            },
            "configuration": {
              "description": "Configuration",
              "type": "string"
            },
            "clean": {
              "description": "Clean",
              "type": "boolean"
            },
            "packageApp": {
              "description": "Create app package",
              "type": "boolean"
            },
            "forSimulator": {
              "description": "Build for iOS Simulator",
              "type": "boolean"
            },
            "runNugetRestore": {
              "description": "Run NuGet restore",
              "type": "boolean"
            },
            "args": {
              "description": "Arguments",
              "type": "string"
            },
            "cwd": {
              "description": "Working directory",
              "type": "string"
            },
            "buildToolLocation": {
              "description": "Build tool path",
              "type": "string"
            },
            "iosSigningIdentity": {
              "description": "Signing identity",
              "type": "string"
            },
            "provProfileUuid": {
              "description": "Provisioning profile UUID",
              "type": "string"
            }
          },
          "description": "Xamarin.iOS inputs",
          "required": [
            "packageApp"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[xX][aA][mM][aA][rR][iI][nN][tT][eE][sS][tT][cC][lL][oO][uU][dD]@1$",
          "description": "Xamarin Test Cloud\n\n[Depreciated] Testing mobile apps with Xamarin Test Cloud using Xamarin.UITest - recommended task is now AppCenterTest"
        },
        "inputs": {
          "properties": {
            "app": {
              "description": "App file",
              "type": "string"
            },
            "dsym": {
              "description": "dSYM file (iOS only)",
              "type": "string"
            },
            "teamApiKey": {
              "description": "Team API key",
              "type": "string"
            },
            "user": {
              "description": "User email",
              "type": "string"
            },
            "devices": {
              "description": "Devices",
              "type": "string"
            },
            "series": {
              "description": "Series",
              "type": "string"
            },
            "testDir": {
              "description": "Test assembly directory",
              "type": "string"
            },
            "parallelization": {
              "description": "Parallelization",
              "enum": [
                "none",
                "--fixture-chunk",
                "--test-chunk"
              ]
            },
            "locale": {
              "description": "System language",
              "enum": [
                "da_DK",
                "nl_NL",
                "en_GB",
                "en_US",
                "fr_FR",
                "de_DE",
                "ja_JP",
                "ru_RU",
                "es_MX",
                "es_ES",
                "user"
              ]
            },
            "userDefinedLocale": {
              "description": "Other locale",
              "type": "string"
            },
            "testCloudLocation": {
              "description": "test-cloud.exe location",
              "type": "string"
            },
            "optionalArgs": {
              "description": "Optional arguments",
              "type": "string"
            },
            "publishNUnitResults": {
              "description": "Publish results to TFS/Team Services",
              "type": "boolean"
            }
          },
          "description": "Xamarin Test Cloud inputs",
          "required": [
            "app",
            "teamApiKey",
            "user",
            "devices",
            "testDir"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[xX][cC][oO][dD][eE]@5$",
          "description": "Xcode\n\nBuild, test, or archive an Xcode workspace on macOS. Optionally package an app."
        },
        "inputs": {
          "properties": {
            "actions": {
              "description": "Actions",
              "type": "string"
            },
            "configuration": {
              "description": "Configuration",
              "type": "string"
            },
            "sdk": {
              "description": "SDK",
              "type": "string"
            },
            "xcWorkspacePath": {
              "description": "Workspace or project path",
              "type": "string"
            },
            "scheme": {
              "description": "Scheme",
              "type": "string"
            },
            "xcodeVersion": {
              "description": "Xcode version",
              "enum": [
                "8",
                "9",
                "default",
                "specifyPath"
              ]
            },
            "xcodeDeveloperDir": {
              "description": "Xcode developer path",
              "type": "string"
            },
            "packageApp": {
              "description": "Create app package",
              "type": "boolean"
            },
            "archivePath": {
              "description": "Archive path",
              "type": "string"
            },
            "exportPath": {
              "description": "Export path",
              "type": "string"
            },
            "exportOptions": {
              "description": "Export options",
              "enum": [
                "auto",
                "plist",
                "specify"
              ]
            },
            "exportMethod": {
              "description": "Export method",
              "type": "string"
            },
            "exportTeamId": {
              "description": "Team ID",
              "type": "string"
            },
            "exportOptionsPlist": {
              "description": "Export options plist",
              "type": "string"
            },
            "exportArgs": {
              "description": "Export arguments",
              "type": "string"
            },
            "signingOption": {
              "description": "Signing style",
              "enum": [
                "nosign",
                "default",
                "manual",
                "auto"
              ]
            },
            "signingIdentity": {
              "description": "Signing identity",
              "type": "string"
            },
            "provisioningProfileUuid": {
              "description": "Provisioning profile UUID",
              "type": "string"
            },
            "provisioningProfileName": {
              "description": "Provisioning profile name",
              "type": "string"
            },
            "teamId": {
              "description": "Team ID",
              "type": "string"
            },
            "destinationPlatformOption": {
              "description": "Destination platform"
            },
            "destinationPlatform": {
              "description": "Custom destination platform",
              "type": "string"
            },
            "destinationTypeOption": {
              "description": "Destination type",
              "enum": [
                "simulators",
                "devices"
              ]
            },
            "destinationSimulators": {
              "description": "Simulator",
              "type": "string"
            },
            "destinationDevices": {
              "description": "Device",
              "type": "string"
            },
            "args": {
              "description": "Arguments",
              "type": "string"
            },
            "cwd": {
              "description": "Working directory",
              "type": "string"
            },
            "useXcpretty": {
              "description": "Use xcpretty",
              "type": "boolean"
            },
            "publishJUnitResults": {
              "description": "Publish test results to VSTS/TFS",
              "type": "boolean"
            }
          },
          "description": "Xcode inputs",
          "required": [
            "packageApp"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    },
    {
      "properties": {
        "task": {
          "pattern": "^[xX][cC][oO][dD][eE][pP][aA][cC][kK][aA][gG][eE][iI][oO][sS]@0$",
          "description": "Xcode Package iOS\n\nGenerate an .ipa file from Xcode build output using xcrun (Xcode 7 or below)"
        },
        "inputs": {
          "properties": {
            "appName": {
              "description": "Name of .app",
              "type": "string"
            },
            "ipaName": {
              "description": "Name of .ipa",
              "type": "string"
            },
            "provisioningProfile": {
              "description": "Provisioning Profile Name",
              "type": "string"
            },
            "sdk": {
              "description": "SDK",
              "type": "string"
            },
            "appPath": {
              "description": "Path to .app",
              "type": "string"
            },
            "ipaPath": {
              "description": "Path to place .ipa",
              "type": "string"
            }
          },
          "description": "Xcode Package iOS inputs",
          "required": [
            "provisioningProfile"
          ]
        }
      },
      "required": [
        "inputs"
      ]
    }
  ],
  "properties": {
    "task": {
      "$comments": "TODO: generate all of these",
      "enum": [
        "AndroidSigning@2", "Ant@1"
      ],
      "description": "Task reference including major version"
    },
    "displayName": {
      "type": "string",
      "description": "Human-readable name for the task"
    },
    "name": {
      "type": "string",
      "description": "ID of the task instance",
      "pattern": "^[_A-Za-z0-9]*$"
    },
    "condition": {
      "type": "string",
      "description": "Evaluate this condition expression to determine whether to run this task"
    },
    "continueOnError": {
      "type": "boolean",
      "description": "Continue running the parent phase even on failure?"
    },
    "enabled": {
      "type": "boolean",
      "description": "Run this task when the phase runs?"
    },
    "timeoutInMinutes": {
      "type": "integer",
      "description": "Time to wait for this task to complete before the server kills it"
    },
    "inputs": {
      "type": "object",
      "description": "Task-specific inputs"
    },
    "env": {
      "type": "object",
      "description": "Variables to map into the process's environment"
    }
  },
  "additionalProperties": false
}